module Boss
  uses ParseKit<<Boss>>

#==============================================================================
# Cmd Nodes (Parse Tree / AST)
#==============================================================================
augment Cmd
  METHODS
    method exit_scope( scope:BossScope )
      noAction
endAugment

augment CmdStatements
  METHODS
    method init

    method init( cmd:Cmd )
      add( cmd )
endAugment

augment CmdArgs
endAugment

augment CmdUnary
endAugment

class BossCmdUnary<<$SYMBOL>> : CmdUnary
  METHODS
    method op->String
      return $string($SYMBOL)
endClass

augment CmdBinary
endAugment

class CmdBinaryOp<<$SYMBOL>> : CmdBinary
  METHODS
    method op->String
      return $string($SYMBOL)
endClass

class CmdLiteralUndefined( t ) : Cmd
endClass

class CmdLiteralNull( t ) : Cmd
endClass

class CmdLiteralInt32( t, value:Int32 ) : Cmd
  METHODS
    method to->String
      return value
endClass

class CmdLiteralString( t, value:String ) : Cmd
endClass

class CmdAdd : CmdBinaryOp<<+>>
endClass

class CmdSubtract : CmdBinaryOp<<->>
endClass

class CmdMultiply : CmdBinaryOp<<*>>
endClass

class CmdDivide : CmdBinary
  METHODS
    method op->String
      return "/"
endClass

class CmdMod : CmdBinary
  METHODS
    method op->String
      return "%"
endClass

class CmdPower : CmdBinaryOp<<^>>
  METHODS
endClass

class CmdCompareEQ : CmdBinaryOp<< == >>
endClass

class CmdCompareNE : CmdBinaryOp<< != >>
endClass

class CmdCompareLE : CmdBinaryOp<< <= >>
endClass

class CmdCompareLT : CmdBinary
  METHODS
    method op->String
      return "<"
endClass

class CmdCompareGE : CmdBinaryOp<< >= >>
endClass

class CmdCompareGT : CmdBinary
  METHODS
    method op->String
      return ">"
endClass

class CmdBitwiseXor : CmdBinary
  METHODS
    method op->String
      return "~"
endClass

class CmdBitwiseOr : CmdBinary
  METHODS
    method op->String
      return "|"
endClass

class CmdBitwiseAnd : CmdBinary
  METHODS
    method op->String
      return "&"
endClass

class CmdLeftShift : CmdBinary
  METHODS
    method op->String
      return ":<<:"
endClass

class CmdRightShift : CmdBinary
  METHODS
    method op->String
      return ":>>:"
endClass

class CmdRightShiftX : CmdBinary
  METHODS
    method op->String
      return ":>>>:"
endClass

class CmdNegate : BossCmdUnary<<->>
  METHODS
    method op->String
      return "-"
endClass

class CmdPreIncrement : CmdUnary
  METHODS
    method op->String
      return "++"
endClass

class CmdPreDecrement : CmdUnary
  METHODS
    method op->String
      return "--"
endClass

class CmdPostIncrement : CmdUnary
  METHODS
    method op->String
      return "++"
endClass

class CmdPostDecrement : CmdUnary
  METHODS
    method op->String
      return "--"
endClass

class CmdBitwiseNot : CmdUnary
  METHODS
    method op->String
      return "!"
endClass

class CmdAssign( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method to->String
      return "$ = $" (left,right)
endClass

class CmdAccess( t, context:Cmd, name:String, args:CmdArgs ) : Cmd
  METHODS
    method init( t )
      name = t->String

    method init( t, name, args )

    method to->String
      return name
endClass

class CmdContextRead( t, context:Cmd, name:String, element_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_property_slot = -1 : Int32
    cached_method_slot   = -1 : Int32

  METHODS
    method to->String
      return name
endClass

class CmdContextWrite( t, context:Cmd, name:String, new_value:Cmd, element_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_method_slot   = -1 : Int32
    cached_property_slot = -1 : Int32

  METHODS
    method to->String
      return name
endClass

class CmdThisPropertyRead( t, property_index:Int32 ) : Cmd
endClass

class CmdThisPropertyWrite( t, property_index:Int32, new_value:Cmd ) : Cmd
endClass

class CmdThisPropertyAddLiteralAndAssign( t, property_index:Int32, delta:Real64 ) : Cmd
endClass

class CmdThisPropertyPostIncrement( t, property_index:Int32, delta:Real64 ) : Cmd
endClass

class CmdContextAddLiteralAndAssign( t, context:Cmd, name:String, delta:Real64, element_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_property_slot = -1 : Int32

  METHODS
    method to->String
      return name
endClass

class CmdContextPostIncrement( t, context:Cmd, name:String, delta:Real64, element_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_property_slot = -1 : Int32

  METHODS
    method to->String
      return name
endClass

class CmdContextCall( t, context:Cmd, name:String, args:CmdArgs, method_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_method_slot = -1

  METHODS
    method to->String
      return "$.$$" (context,name,args)
endClass

class CmdGlobalCall( t, m:BossMethod, args:CmdArgs ) : Cmd
  PROPERTIES
    arg_count : Int32

  METHODS
    method to->String
      return "$$" (m.name,select{args:args->String || "()"})
endClass

class CmdGlobalRead( t, name:String, index:Int32 ) : Cmd
endClass

class CmdGlobalWrite( t, name:String, index:Int32, new_value:Cmd ) : Cmd
endClass

class CmdLocalRead( t, name:String, index:Int32 ) : Cmd
endClass

class CmdLocalAddLiteralAndAssign( t, name:String, index:Int32, delta:Real64 ) : Cmd
endClass

class CmdLocalPostIncrement( t, name:String, index:Int32, delta:Real64 ) : Cmd
endClass

class CmdLocalWrite( t, name:String, index:Int32, new_value:Cmd ) : Cmd
endClass


class CmdGlobal( t, name:String, initial_value:Cmd, index=-1:Int32 ) : Cmd
endClass


class CmdLocal( t, name:String, initial_value:Cmd, index=-1:Int32 ) : Cmd
  METHODS
    #{
    method exit_scope( vm:BossVM )
      require vm.locals.count
      vm.locals.remove_last

    method resolved( scope:BossVM )->Cmd
      if (index == -1)
        local v = scope.find_local( name )
        if (v.exists)
          throw t.error( 'A local variable named "$" already exists.' (name) )
        else
          if (initial_value) initial_value = initial_value.resolved( scope )
          else               initial_value = CmdLiteralUndefined(t)
          index = scope.this_method.add_local( t, name, initial_value )
        endIf
      endIf
      scope.locals.add( scope.this_method.locals[index-1] )
      return this
      }#
endClass

class CmdCreateObject( t, type:BossType, args:CmdArgs ) : Cmd
endClass

class CmdReturnUndefined( t ) : Cmd
endClass

class CmdReturnValue( t, result:Cmd ) : Cmd
endClass


class CmdPrintln( t, args:CmdArgs ) : Cmd
endClass


class CmdControlStructure( t ) : Cmd
  PROPERTIES
    statements : CmdStatements

endClass


class CmdIf( t, condition:Cmd, statements ) : CmdControlStructure
endClass


class CmdIfElse( t, condition:Cmd, statements, else_statements:CmdStatements ) : CmdControlStructure
endClass


class CmdWhile( t, condition:Cmd, statements=CmdStatements() ) : CmdControlStructure
endClass

class CmdThis : Cmd
endClass

#{
class CmdThisCall
endClass
}#
