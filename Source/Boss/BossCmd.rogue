module Boss
  uses ParseKit<<Boss>>

#==============================================================================
# Cmd Nodes (Parse Tree / AST)
#==============================================================================
augment Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      throw UnsupportedOperationError()

    method exit_scope( vm:BossVM )
      noAction

    method resolved( vm:BossVM )->Cmd
      return this

    method resolve_assignment( vm:BossVM, new_value:Cmd )->Cmd
      throw t.error( "Illegal assignment" )
endAugment

augment CmdStatements
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = UndefinedBossValue
      result = (forEach in this).execute( vm )
      return result

    method resolve( vm:BossVM )
      forEach (statement at index in this)
        this[ index ] = statement.resolved( vm )
      endForEach

      (forEach in this).exit_scope( vm )
endAugment

augment CmdArgs
  METHODS
    method resolve( vm:BossVM )
      forEach (arg at index in this)
        this[ index ] = arg.resolved( vm )
      endForEach
endAugment

augment CmdUnary
  METHODS
    method resolved( vm:BossVM )->Cmd
      operand = operand.resolved( vm )
      return this
endAugment

class BossCmdUnary<<$SYMBOL>> : CmdUnary
  METHODS
    method execute( vm:BossVM )->BossValue
      return $SYMBOL operand.execute( vm )

    method op->String
      return $string($SYMBOL)
endClass

augment CmdBinary
  METHODS
    method resolved( vm:BossVM )->Cmd
      left = left.resolved( vm )
      right = right.resolved( vm )
      return resolve_op

    method resolve_op->Cmd
      return this
endAugment

class CmdBinaryOp<<$SYMBOL>> : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute( vm ) $SYMBOL right.execute( vm )

    method op->String
      return $string($SYMBOL)
endClass

class CmdLiteralUndefined( t ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return UndefinedBossValue
endClass

class CmdLiteralInt32( t, value:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return value

    method resolved( vm:BossVM )->Cmd
      return this

    method to->String
      return value
endClass

class CmdAdd : CmdBinaryOp<<+>>
  METHODS
endClass

class CmdSubtract : CmdBinaryOp<<->>
  METHODS
endClass

class CmdMultiply : CmdBinaryOp<<*>>
  METHODS
endClass

class CmdDivide : CmdBinary
  METHODS
    method op->String
      return "/"
endClass

class CmdMod : CmdBinary
  METHODS
    method op->String
      return "%"
endClass

class CmdPower : CmdBinaryOp<<^>>
  METHODS
endClass

class CmdBitwiseXor : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 ~ right.execute(vm)->Int64

    method op->String
      return "~"
endClass

class CmdBitwiseOr : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 | right.execute(vm)->Int64

    method op->String
      return "|"
endClass

class CmdBitwiseAnd : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 & right.execute(vm)->Int64

    method op->String
      return "&"
endClass

class CmdLeftShift : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 :<<: right.execute(vm)->Int64

    method op->String
      return ":<<:"
endClass

class CmdRightShift : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 :>>: right.execute(vm)->Int64

    method op->String
      return ":>>:"
endClass

class CmdRightShiftX : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 :>>>: right.execute(vm)->Int64

    method op->String
      return ":>>>:"
endClass

class CmdNegate : BossCmdUnary<<->>
  METHODS
endClass

class CmdBitwiseNot : CmdUnary
  METHODS
    method execute( vm:BossVM )->BossValue
      return -operand.execute( vm )->Int64

    method op->String
      return "-"
endClass

class CmdAssign( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method resolved( vm:BossVM )->Cmd
      return left.resolve_assignment( vm, right.resolved(vm) )

    method to->String
      return "$ = $" (left,right)
endClass

class CmdAccess( t, name:String ) : Cmd
  METHODS
    method init( t )
      name = t->String

    method resolved( vm:BossVM )->Cmd
      local v = vm.find_local( name )
      if (v.exists)
        return CmdReadLocal( t, name, v.value.index ).resolved( vm )
      elseIf (vm.global_vars.contains(name))
        return CmdReadGlobal( t, name, vm.global_vars.index(name) ).resolved( vm )
      elseIf (vm.types.contains(name))
        return CmdCreateObject( t, vm.types[name], CmdArgs() ).resolved( vm )
      else
        throw t.error( 'No such method or variable: "$".' (name) )
      endIf

    method resolve_assignment( vm:BossVM, new_value:Cmd )->Cmd
      local v = vm.find_local( name )
      if (v.exists)
        return CmdWriteLocal( t, name, v.value.index, new_value ).resolved( vm )
      elseIf (vm.global_vars.contains(name))
        return CmdWriteGlobal( t, name, vm.global_vars.index(name), new_value ).resolved( vm )
      else
        throw t.error( 'No such method or variable: "$".' (name) )
      endIf

    method to->String
      return name
endClass

class CmdReadGlobal( t, name:String, index:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return vm.global_vars[ index ]
endClass

class CmdWriteGlobal( t, name:String, index:Int32, new_value:Cmd ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = new_value.execute( vm )
      vm.global_vars[ index ] = result
      return result
endClass

class CmdReadLocal( t, name:String, index:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return vm.stack[ vm.fp+index ]
endClass

class CmdWriteLocal( t, name:String, index:Int32, new_value:Cmd ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = new_value.execute( vm )
      vm.stack[ vm.fp+index ] = result
      return result
endClass


class CmdGlobal( t, name:String, initial_value:Cmd, index=-1:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      if (initial_value)
        vm.global_vars[ index ] = initial_value.execute( vm )
      endIf
      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      if (index == -1)
        if (vm.global_vars.contains(name))
          throw t.error( 'A global variable named "$" already exists.' (name) )
        endIf
        index = vm.global_vars.count
        vm.global_vars[ name ] = UndefinedBossValue
      endIf
      initial_value = initial_value.resolved( vm )
      return this
endClass


class CmdLocal( t, name:String, initial_value:Cmd, index=-1:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      vm.stack[ vm.fp+index ] = initial_value.execute( vm )
      return UndefinedBossValue

    method exit_scope( vm:BossVM )
      require vm.locals.count
      vm.locals.remove_last

    method resolved( vm:BossVM )->Cmd
      if (index == -1)
        local v = vm.find_local( name )
        if (v.exists)
          throw t.error( 'A local variable named "$" already exists.' (name) )
        else
          if (initial_value) initial_value = initial_value.resolved( vm )
          else               initial_value = CmdLiteralUndefined(t)
          index = vm.this_method.add_local( t, name, initial_value )
        endIf
      endIf
      vm.locals.add( vm.this_method.locals[index-1] )
      return this
endClass

class CmdCreateObject( t, type:BossType, args:CmdArgs ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = BossValue( BossObject(type) )
      if (args.count)
        vm.push( result )
        forEach (arg in args) vm.push( arg.execute(vm) )
        vm.call( vm.id_init, args.count )
      endIf
      return result

    method resolved( vm:BossVM )->Cmd
      type.resolve
      args.resolve( vm )
      return this
endClass

