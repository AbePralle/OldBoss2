module Boss
  uses ParseKit<<Boss>>

#==============================================================================
# Cmd Nodes (Parse Tree / AST)
#==============================================================================
augment Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      throw UnsupportedOperationError()

    method exit_scope( vm:BossVM )
      noAction

    method resolved( vm:BossVM )->Cmd
      return this

    method resolve_context_access( vm:BossVM, name:String, args:CmdArgs )->Cmd
      # Note this Cmd is already resolved() before resolve_context_access() is called on it
      if (args)
        return CmdContextCall( t, this, name, args ).resolved( vm )
      else
        return CmdContextRead( t, this, name ).resolved( vm )
      endIf

    method resolve_assignment( vm:BossVM, new_value:Cmd )->Cmd
      throw t.error( "Illegal assignment" )
endAugment

augment CmdStatements
  METHODS
    method init

    method init( cmd:Cmd )
      add( cmd )

    method execute( vm:BossVM )->BossValue
      local result = UndefinedBossValue
      result = (forEach in this).execute( vm )
      return result

    method resolve( vm:BossVM )
      forEach (statement at index in this)
        this[ index ] = statement.resolved( vm )
      endForEach

      (forEach in this).exit_scope( vm )
endAugment

augment CmdArgs
  METHODS
    method execute( vm:BossVM )
      vm.push( (forEach in this).execute(vm) )

    method resolve( vm:BossVM )
      forEach (arg at index in this)
        this[ index ] = arg.resolved( vm )
      endForEach
endAugment

augment CmdUnary
  METHODS
    method resolved( vm:BossVM )->Cmd
      operand = operand.resolved( vm )
      return this
endAugment

class BossCmdUnary<<$SYMBOL>> : CmdUnary
  METHODS
    method execute( vm:BossVM )->BossValue
      return $SYMBOL operand.execute( vm )

    method op->String
      return $string($SYMBOL)
endClass

augment CmdBinary
  METHODS
    method resolved( vm:BossVM )->Cmd
      left = left.resolved( vm )
      right = right.resolved( vm )
      return resolve_op

    method resolve_op->Cmd
      return this
endAugment

class CmdBinaryOp<<$SYMBOL>> : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute( vm ) $SYMBOL right.execute( vm )

    method op->String
      return $string($SYMBOL)
endClass

class CmdLiteralUndefined( t ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return UndefinedBossValue
endClass

class CmdLiteralNull( t ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return NullBossValue
endClass

class CmdLiteralInt32( t, value:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return value

    method resolved( vm:BossVM )->Cmd
      return this

    method to->String
      return value
endClass

class CmdLiteralString( t, value:String ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return value

    method resolved( vm:BossVM )->Cmd
      return this
endClass

class CmdAdd : CmdBinaryOp<<+>>
  METHODS
endClass

class CmdSubtract : CmdBinaryOp<<->>
  METHODS
endClass

class CmdMultiply : CmdBinaryOp<<*>>
  METHODS
endClass

class CmdDivide : CmdBinary
  METHODS
    method op->String
      return "/"
endClass

class CmdMod : CmdBinary
  METHODS
    method op->String
      return "%"
endClass

class CmdPower : CmdBinaryOp<<^>>
  METHODS
endClass

class CmdCompareEQ : CmdBinaryOp<< == >>
endClass

class CmdCompareNE : CmdBinaryOp<< != >>
endClass

class CmdCompareLE : CmdBinaryOp<< <= >>
endClass

class CmdCompareLT : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute( vm ) < right.execute( vm )

    method op->String
      return "<"
endClass

class CmdCompareGE : CmdBinaryOp<< >= >>
endClass

class CmdCompareGT : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute( vm ) > right.execute( vm )

    method op->String
      return ">"
endClass

class CmdBitwiseXor : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 ~ right.execute(vm)->Int64

    method op->String
      return "~"
endClass

class CmdBitwiseOr : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 | right.execute(vm)->Int64

    method op->String
      return "|"
endClass

class CmdBitwiseAnd : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 & right.execute(vm)->Int64

    method op->String
      return "&"
endClass

class CmdLeftShift : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 :<<: right.execute(vm)->Int64

    method op->String
      return ":<<:"
endClass

class CmdRightShift : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 :>>: right.execute(vm)->Int64

    method op->String
      return ":>>:"
endClass

class CmdRightShiftX : CmdBinary
  METHODS
    method execute( vm:BossVM )->BossValue
      return left.execute(vm)->Int64 :>>>: right.execute(vm)->Int64

    method op->String
      return ":>>>:"
endClass

class CmdNegate : BossCmdUnary<<->>
  METHODS
endClass

class CmdBitwiseNot : CmdUnary
  METHODS
    method execute( vm:BossVM )->BossValue
      return -operand.execute( vm )->Int64

    method op->String
      return "-"
endClass

class CmdAssign( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method resolved( vm:BossVM )->Cmd
      return left.resolve_assignment( vm, right.resolved(vm) )

    method to->String
      return "$ = $" (left,right)
endClass

class CmdAccess( t, context:Cmd, name:String, args:CmdArgs ) : Cmd
  METHODS
    method init( t )
      name = t->String

    method init( t, name, args )

    method resolved( vm:BossVM )->Cmd
      if (context)
        return context.resolved( vm ).resolve_context_access( vm, name, args )

      else
        # No class or object context given
        if (args)
          args.resolve( vm )
          local type = vm.types[ name ]
          if (type)
            return CmdCreateObject( t, type, args ).resolved( vm )
          endIf
          throw t.error( "No such class or method '$'." (name) )
        else
          local v = vm.find_local( name )
          if (v.exists)
            return CmdReadLocal( t, name, v.value.index ).resolved( vm )
          elseIf (vm.global_vars.contains(name))
            return CmdReadGlobal( t, name, vm.global_vars.index(name) ).resolved( vm )
          endIf
          throw t.error( "No such method or variable '$'." (name) )
        endIf
      endIf

    method resolve_assignment( vm:BossVM, new_value:Cmd )->Cmd
      if (context)
        return CmdContextWrite( t, context, name, new_value ).resolved( vm )
      else
        local v = vm.find_local( name )
        if (v.exists)
          return CmdWriteLocal( t, name, v.value.index, new_value ).resolved( vm )
        elseIf (vm.global_vars.contains(name))
          return CmdWriteGlobal( t, name, vm.global_vars.index(name), new_value ).resolved( vm )
        else
          throw t.error( 'No such method or variable: "$".' (name) )
        endIf
      endIf

    method to->String
      return name
endClass

class CmdContextRead( t, context:Cmd, name:String, element_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_property_slot = -1 : Int32
    cached_method_slot   = -1 : Int32

  METHODS
    method execute( vm:BossVM )->BossValue
      local value = context.execute( vm )
      local obj = value->Object as BossObject
      local type = vm.type_of( value )
      if (not type) return UndefinedBossValue

      local slot = cached_method_slot
      if (slot >= 0)
        if (slot < type.methods.count)
          local m = type.methods[slot]
          if (m.id == element_id)
            vm.push( value )
            m.call( 0 )
            return vm.pop
          endIf
        endIf
      endIf

      slot = cached_property_slot
      if (slot >= 0)
        if (slot < type.properties.count and type.properties[slot].id == element_id)
          return obj.properties[ slot ]
        endIf
      endIf

      cached_method_slot = type.locate_method( element_id )
      if (cached_method_slot >= 0)
        vm.push( value )
        type.methods[ cached_method_slot ].call( 0 )
        return vm.pop
      endIf

      cached_property_slot = type.locate_property( element_id )
      if (cached_property_slot >= 0) return obj.properties[ cached_property_slot ]

      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      context = context.resolved( vm )
      element_id = vm.id( name )
      return this

    method to->String
      return name
endClass

class CmdContextWrite( t, context:Cmd, name:String, new_value:Cmd, element_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_method_slot   = -1 : Int32
    cached_property_slot = -1 : Int32

  METHODS
    method execute( vm:BossVM )->BossValue
      local new_value = this.new_value.execute( vm )
      local context_value = context.execute( vm )
      local obj = context_value->Object as BossObject
      local type = vm.type_of( context_value )
      if (not type) return UndefinedBossValue

      local slot = cached_method_slot
      if (slot >= 0)
        if (slot < type.methods.count)
          local m = type.methods[slot]
          if (m.id == element_id)
            vm.push( context_value )
            vm.push( new_value )
            m.call( 1 )
            return vm.pop
          endIf
        endIf
      endIf

      slot = cached_property_slot
      if (slot >= 0)
        if (slot < type.properties.count and type.properties[slot].id == element_id)
          obj.properties[ slot ] = new_value
          return UndefinedBossValue
        endIf
      endIf

      cached_method_slot = type.locate_method( element_id )
      if (cached_method_slot >= 0)
        vm.push( context_value )
        vm.push( new_value )
        type.methods[ cached_method_slot ].call( 1 )
        return vm.pop
      endIf

      cached_property_slot = type.locate_property( element_id )
      if (cached_property_slot >= 0)
        obj.properties[ cached_property_slot ] = new_value
      endIf

      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      context = context.resolved( vm )
      element_id = vm.id( name )
      new_value = new_value.resolved( vm )
      return this

    method to->String
      return name
endClass

class CmdContextCall( t, context:Cmd, name:String, args:CmdArgs, method_id=0:Int32 ) : Cmd
  PROPERTIES
    cached_method_slot = -1

  METHODS
    method execute( vm:BossVM )->BossValue
      local value = context.execute( vm )
      local type = vm.type_of( value )

      local slot = cached_method_slot
      if (slot >= 0)
        if (slot < type.methods.count)
          local m = type.methods[slot]
          if (m.id == method_id)
            vm.push( value )
            if (args.count)
              args.execute( vm )
              m.call( args.count )
            else
              m.call( 0 )
            endIf
            return vm.pop
          endIf
        endIf
      endIf

      cached_method_slot = type.locate_method( method_id )
      if (cached_method_slot >= 0)
        vm.push( value )
        if (args.count)
          args.execute( vm )
          type.methods[ cached_method_slot ].call( args.count )
        else
          type.methods[ cached_method_slot ].call( 0 )
        endIf
        return vm.pop
      endIf

      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      context = context.resolved( vm )
      args.resolve( vm )
      method_id = vm.id( name )
      return this

    method to->String
      return "$.$$" (context,name,args)
endClass

class CmdReadGlobal( t, name:String, index:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return vm.global_vars[ index ]
endClass

class CmdWriteGlobal( t, name:String, index:Int32, new_value:Cmd ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = new_value.execute( vm )
      vm.global_vars[ index ] = result
      return result
endClass

class CmdReadLocal( t, name:String, index:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return vm.stack[ vm.fp+index ]
endClass

class CmdWriteLocal( t, name:String, index:Int32, new_value:Cmd ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = new_value.execute( vm )
      vm.stack[ vm.fp+index ] = result
      return result
endClass


class CmdGlobal( t, name:String, initial_value:Cmd, index=-1:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      if (initial_value)
        vm.global_vars[ index ] = initial_value.execute( vm )
      endIf
      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      if (index == -1)
        if (vm.global_vars.contains(name))
          throw t.error( 'A global variable named "$" already exists.' (name) )
        endIf
        index = vm.global_vars.count
        vm.global_vars[ name ] = UndefinedBossValue
      endIf
      initial_value = initial_value.resolved( vm )
      return this
endClass


class CmdLocal( t, name:String, initial_value:Cmd, index=-1:Int32 ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      vm.stack[ vm.fp+index ] = initial_value.execute( vm )
      return UndefinedBossValue

    method exit_scope( vm:BossVM )
      require vm.locals.count
      vm.locals.remove_last

    method resolved( vm:BossVM )->Cmd
      if (index == -1)
        local v = vm.find_local( name )
        if (v.exists)
          throw t.error( 'A local variable named "$" already exists.' (name) )
        else
          if (initial_value) initial_value = initial_value.resolved( vm )
          else               initial_value = CmdLiteralUndefined(t)
          index = vm.this_method.add_local( t, name, initial_value )
        endIf
      endIf
      vm.locals.add( vm.this_method.locals[index-1] )
      return this
endClass

class CmdCreateObject( t, type:BossType, args:CmdArgs ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = BossValue( BossObject(type) )
      if (args.count)
        vm.push( result )
        forEach (arg in args) vm.push( arg.execute(vm) )
        vm.call( vm.id_init, args.count )
      endIf
      return result

    method resolved( vm:BossVM )->Cmd
      type.resolve
      args.resolve( vm )
      return this
endClass

class CmdReturnUndefined( t ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      throw BossReturn( UndefinedBossValue )
endClass

class CmdReturnValue( t, result:Cmd ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      throw BossReturn( result.execute(vm) )

    method resolved( vm:BossVM )->Cmd
      result = result.resolved( vm )
      return this
endClass


class CmdPrintln( t, args:CmdArgs ) : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      if (args)
        forEach (arg in args) print arg.execute( vm )
      endIf
      println
      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      if (args) args.resolve( vm )
      return this
endClass


class CmdControlStructure( t ) : Cmd
  PROPERTIES
    statements : CmdStatements

endClass


class CmdIf( t, condition:Cmd, statements ) : CmdControlStructure
  METHODS
    method execute( vm:BossVM )->BossValue
      if (condition.execute(vm)->Logical) return statements.execute( vm )
      return UndefinedBossValue

    method resolved( vm:BossVM )->Cmd
      condition = condition.resolved( vm )
      statements.resolve( vm )
      return this
endClass


class CmdIfElse( t, condition:Cmd, statements, else_statements:CmdStatements ) : CmdControlStructure
  METHODS
    method execute( vm:BossVM )->BossValue
      if (condition.execute(vm)->Logical) return statements.execute( vm )
      else                                return else_statements.execute( vm )

    method resolved( vm:BossVM )->Cmd
      condition = condition.resolved( vm )
      statements.resolve( vm )
      else_statements.resolve( vm )
      return this
endClass


class CmdWhile( t, condition:Cmd, statements=CmdStatements() ) : CmdControlStructure
  METHODS
    method execute( vm:BossVM )->BossValue
      local result = UndefinedBossValue
      while (condition.execute(vm)->Logical)
        result = statements.execute( vm )
      endWhile
      return result

    method resolved( vm:BossVM )->Cmd
      condition = condition.resolved( vm )
      statements.resolve( vm )
      return this
endClass

class CmdThis : Cmd
  METHODS
    method execute( vm:BossVM )->BossValue
      return vm.stack[ vm.fp ]
endClass

#{
class CmdThisCall
  METHODS
    method execute( vm:BossVM )->BossValue
      return "argc:$" (vm.
endClass
}#
