module Boss
  uses ParseKit<<Boss>>

#==============================================================================
# BossVM
#==============================================================================
class BossVM
  PROPERTIES
    is_resolved : Logical

    id_table    = LookupList<<Int32>>()

    modules     = LookupList<<BossModule>>()
    module_list = BossModule[]

    internal_t  = Token( TokenType.EOI, "[BossVM]", 0, 0 )
    type_Int32  : BossType

    stack       = BossValue[]

  METHODS
    method init
      type_Int32 = define_type( "Int32" )

    method add_module( filepath:String, name:String )->BossModule
      local m = BossModule( this, filepath, name )
      module_list.add( m )
      return m

    method define_type( name:String )->BossType
      return BossType( internal_t, name, BossType.IS_DEFINED )

    method import( t:Token, filepath:String )->BossModule
      local m = modules[ filepath ]
      if (m) return m

      local original_filepath = filepath

      if (File.is_folder(filepath)) throw t.error( "Importing a folder is not yet supported." )

      if (not filepath.ends_with(".boss",&ignore_case)) filepath += ".boss"
      if (File.exists(filepath))
        filepath = File.absolute_filepath( filepath )
      else
        throw t.error( "Can't find import: " + filepath )
      endIf

      m = add_module( filepath, File.filename(filepath).before_suffix(".boss",&ignore_case) )
      modules[ original_filepath ] = m
      modules[ filepath ] = m

      local source = File.load_as_string( filepath )
      if (parse(m,source))
        m.resolve
        m.launch
      endIf

      return m

    method load( filename:String, source:String )
      try
        local m = add_module( filename, filename.before_suffix(".boss",&ignore_case) )
        if (parse(m,source))
          m.resolve
          m.launch
        endIf
      catch (err:BossError)
        err.print
      endTry

    method parse( m:BossModule, source:String )->Logical
      try
        local parser = BossParser( m, source )

        loop
          #if (parser.parse_component) nextIteration

          if (parser.parse_multi_line_statements(m.statements)) nextIteration

          escapeLoop
        endLoop

        return true

      catch (err:BossError)
        err.print
        return false
      endTry

    method push( value:BossValue )
      stack.add( value )

    method pop_int32->Int32
      if (stack.is_empty) return 0
      return stack.remove_last->Int32

endClass

