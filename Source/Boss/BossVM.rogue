module Boss
  uses ParseKit<<Boss>>

#==============================================================================
# BossVM
#==============================================================================
class BossVM
  PROPERTIES
    parser      = BossParser( this )

    internal_t  : Token
    last_error  : BossError

    is_resolved : Logical
    types       = LookupList<<BossType>>()
    type_Global : BossType


    string_to_id_map  = StringTable<<Int32>>()
    global_vars       = LookupList<<BossValue>>()
    global_statements = CmdStatements()
    m_on_execute      : BossMethod

    scope : BossScope

  METHODS
    method init
      internal_t = Token( TokenType.EOI, "[BossVM]", 0, 0 )
      type_Global = get_type( "Global" )
      clear_global_statements

    method execute->BossValue
      try
        if (not is_resolved)
          m_on_execute.statements.add( global_statements )
          global_statements.clear
          (forEach in types).resolve
        endIf

        local result = m_on_execute.execute
        clear_global_statements
        return result

      catch ( err:BossError )
        clear_global_statements
        throw err

      endTry

    method parse( filepath:String, source:String )->Logical
      is_resolved = false

      scope = BossScope( m_on_execute )

      try
        parser.set_source( filepath, source )
        loop
          if (parser.parse_multi_line_statements(global_statements)) nextIteration
          escapeLoop
        endLoop
        return true
      catch (err:BossError)
        err.print
        return false
      endTry

      #{
    method resolve->Logical
      try
        BossVM = this   # assign singleton
        # TODO
        return true
      catch (err:BossError)
        last_error = err
        err.print( source )
        return false
      endTry
      }#

    method get_type( t:Token, name:String, attributes=0:Int32 )->BossType
      local result = types[ name ]
      if (result)
        if (result.t is internal_t)
          result.t = t
          result.attributes = attributes
        endIf
      else
        result = BossType( this, t, name, attributes )
        types[ name ] = result
      endIf
      return result

    method get_type( name:String, attributes=0:Int32 )->BossType
      return get_type( internal_t, name, attributes )

    method clear_global_statements
      m_on_execute = type_Global.get_method( "on_execute" )
      m_on_execute.statements.clear

    method string_to_id( st:String )->Int32
      local entry = string_to_id_map.find( st )
      if (entry) return entry.value

      local result = string_to_id_map.count
      string_to_id_map[ st ] = result
      return result
endClass

