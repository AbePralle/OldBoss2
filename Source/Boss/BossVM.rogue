module Boss
  uses ParseKit<<Boss>>

#==============================================================================
# BossVM
#==============================================================================
class BossVM
  PROPERTIES
    stack = BossValue[]
    fp    : Int32

    id_table     = LookupList<<Int32>>()
    global_vars  = LookupList<<BossValue>>()

    parser       = BossParser( this )

    internal_t   : Token
    last_error   : BossError

    is_resolved  : Logical
    types        = LookupList<<BossType>>()

    type_Object  : BossType
    type_Global  : BossType

    id_init      : Int32

    global_statements = CmdStatements()
    m_on_execute      : BossMethod

    locals      = BossLocal[]

    this_type   : BossType
    this_method : BossMethod

  METHODS
    method init
      internal_t   = Token( TokenType.EOI, "[BossVM]", 0, 0 )

      type_Object  = get_type( "Object" )
      type_Global  = get_type( "Global" )

      type_Global._singleton = BossObject( type_Global )

      global_vars//Global = BossValue( BossObject(type_Global) )
      clear_global_statements

      id_init = id( "init" )

    method call( m_id:Int32, argc:Int32 )->BossValue
      local new_fp = stack.count - (argc+1)
      local context = stack[ new_fp ]
      local context_type : BossType
      if (context.type == BossValue.TYPE_OBJECT)
        local obj = context.object as BossObject
        if (not obj) return UndefinedBossValue
        context_type = obj.type
        return UndefinedBossValue
      else
        return UndefinedBossValue
      endIf

    method clear_global_statements
      m_on_execute = type_Global.get_method( "on_execute" )
      m_on_execute.statements.clear

    method execute->BossValue
      try
        if (not is_resolved)
          m_on_execute.statements.add( global_statements )
          global_statements.clear
          (forEach in types).resolve
        endIf

        stack.clear
        push( BossValue(type_Global._singleton) )
        m_on_execute.call( 0 )
        clear_global_statements
        return pop

      catch ( err:BossError )
        clear_global_statements
        throw err

      endTry

    method find_local( name:String )->BossLocal?
      forEach (v in locals)
        if (v.name == name) return v
      endForEach
      return null

    method get_type( t:Token, name:String, attributes=0:Int32 )->BossType
      local result = types[ name ]
      if (result)
        if (result.t is internal_t)
          result.t = t
          result.attributes = attributes
        endIf
      else
        result = BossType( this, t, name, types.count, attributes )
        types[ name ] = result
      endIf
      return result

    method get_type( name:String, attributes=0:Int32 )->BossType
      return get_type( internal_t, name, attributes )

    method id( st:String )->Int32
      local index = id_table.locate( st )
      if (index.exists) return index.value

      local result = id_table.count
      id_table[ st ] = result
      return result

    method parse( filepath:String )->Logical
      return parse( filepath, File.load_as_string(filepath) )

    method parse( filepath:String, source:String )->Logical
      is_resolved = false
      type_Global.is_resolved = false

      try
        parser.set_source( filepath, source )
        loop
          if (parser.parse_component) nextIteration

          this_method = m_on_execute
          this_type = this_method.type_context
          if (parser.parse_multi_line_statements(global_statements)) nextIteration

          escapeLoop
        endLoop
        return true
      catch (err:BossError)
        err.print
        return false
      endTry

    method peek->BossValue
      if (not stack.count) throw BossError( "BossVM.peek() on empty stack." )
      return stack.last

    method push( value:BossValue ) [macro]
      this.stack.add( value )

    method pop->BossValue
      if (not stack.count) throw BossError( "BossVM.pop() on empty stack." )
      return stack.remove_last

    method type_of( value:BossValue )->BossType
      local obj = value.object as BossObject
      if (obj) return obj.type
      return null

endClass

