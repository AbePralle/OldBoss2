module Boss
  uses ParseKit<<Boss>>

  #{
class BossMethod
  #{
  PROPERTIES
    vm           : BossVM
    type_context : BossType
    return_type  : BossType
    t            : Token
    name         : String
    signature    : String
    #global_index : Int32
    statements   = CmdStatements()
    locals       = BossLocal[]
    param_count  : Int32

    is_resolved  : Logical

  METHODS
    method init( type_context, t, name )
      #global_index = type_context.vm.methods.count
      vm = type_context.vm

      #{
    method reset
      statements.clear
      locals.clear
      param_count = 0
      }#

    method add_local( t:Token, name:String, initial_value:Cmd, type:CmdTypeReference )->Int32
      local index = locals.count + 1
      locals.add( BossLocal(t,name,initial_value,type,index) )
      return index

    method add_parameter( t:Token, name:String, initial_value:Cmd, type:BossTypeReference )->Int32
      ++param_count
      return add_local( t, name, initial_value, type )

      #{
    method call( arg_count:Int32 )
      local vm    = type_context.vm
      local stack = vm.stack
      local old_fp = vm.fp
      vm.fp = stack.count - (arg_count+1)

      while (arg_count > param_count)
        stack.remove_last
        --arg_count
      endWhile
      while (arg_count < param_count)
        stack.add( UndefinedBossValue )
        ++arg_count
      endWhile

      loop( locals.count - param_count )
        stack.add( UndefinedBossValue )
      endLoop

      stack[ vm.fp ] = execute
      stack.discard_from( vm.fp+1 )
      vm.fp = old_fp

    method execute->BossValue
        local vm = type_context.vm
        local result = statements.execute( vm )
        which (vm.status)
          case BossVM.STATUS_RETURNING
            vm.status = BossVM.STATUS_NORMAL
            return result
          others
            return result
        endWhich
        }#

    method resolve
      if (is_resolved) return
      is_resolved = true

      #{
      forEach (param_index in 0..<param_count)
        vm.locals.add( locals[param_index] )
      endForEach
      }#

      statements.resolve( BossScope(this) )

      #{
      loop (param_count) vm.locals.remove_last
      }#

    method signature->String
      if (@signature) return @signature
      use builder = StringBuilder.pool
        builder.print( name )
        builder.print( '(' )
        forEach (index in 0..<param_count)
          if (index > 0) builder.print( ',' )
          local param = locals[ index ]
          builder.print( param.type.name )
        endForEach
        builder.print( ')' )
      endUse
      }#

endClass
}#
