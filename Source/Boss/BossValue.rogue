class CustomBossValue
  # Defines API for custom Value objects
  METHODS
    method add( other:BossValue )

    method add( other:BossValue[] )

    method add_all( other:BossValue )

    method apply( fn:Function(BossValue)->BossValue )

    method clear

    method cloned->CustomBossValue
      # Returning 'null' will result in BossValue.cloned() returning UndefinedBossValue
      return this

    method contains( value:BossValue )->Logical
      return false

    method count->Int32
      return 0

    method count( query:(Function(BossValue)->Logical) )->Int32
      return 0

    method get( index:Int32 )->BossValue
      return UndefinedBossValue

    method get( key:String )->BossValue
      return UndefinedBossValue

    method get( query:(Function(BossValue)->Logical) )->BossValue
      return UndefinedBossValue

    method is_collection->Logical
      return false

    method operator==( other:CustomBossValue )->Logical
      return this is other

    method to->Logical
      return false

    method to->Real64
      return 0.0

    method to->String
      return type_name
endClass

class BossValue( type:Int32, value:Int64, object=null:Object ) [compound]
  ENUMERATE
    FORMATTED = 1
    OMIT_COMMAS = 2

    TYPE_UNDEFINED = 0
    TYPE_NULL
    TYPE_LOGICAL
    TYPE_BYTE
    TYPE_CHARACTER
    TYPE_INT32
    TYPE_INT64
    TYPE_REAL64
    LAST_VALUE_TYPE  # as in last non-reference type

    TYPE_OBJECT
    TYPE_STRING
    TYPE_LIST
    TYPE_TABLE
    TYPE_CUSTOM # 'object' will be a CustomBossValue object.

  GLOBAL METHODS
    method create->BossValue
      return UndefinedBossValue

    method create( type:Int32, object:Object )->BossValue [macro]
      return BossValue( type, 0, object )

    method create( value:Character )->BossValue
      return BossValue( TYPE_CHARACTER, value )

    method create( value:Logical )->BossValue
      return BossValue( TYPE_LOGICAL, value->Int32 )

    method create( value:Byte )->BossValue
      return BossValue( TYPE_BYTE, value )

    method create( value:Int32 )->BossValue
      return BossValue( TYPE_INT32, value )

    method create( value:Real32 )->BossValue
      return BossValue( TYPE_REAL64, value->Real64.integer_bits )

    method create( value:Real64 )->BossValue
      return BossValue( TYPE_REAL64, value.integer_bits )

    method create( value:Int64 )->BossValue
      return BossValue( TYPE_INT64, value )

    method create( value:Object )->BossValue
      if (value is null)           return NullBossValue
      if (value instanceOf BossValue) return value as BossValue
      if (value instanceOf String) return BossValue( TYPE_STRING, 0, value )
      return BossValue( TYPE_OBJECT, 0, value )

    method create( value:String )->BossValue
      if (value is null) return NullBossValue
      return BossValue( TYPE_STRING, 0, value )

    method create( value:BossValue )->BossValue
      return value

      #{
    method load( file:File )->BossValue
      return JSON.load( file )
      }#

    method list->BossValue
      return BossValue( TYPE_LIST, 0, BossValue[] )

      #{
    method parse( json:String )->BossValue
      return JSON.parse( json )
      }#

    method table->BossValue
      return BossValue( TYPE_TABLE, 0, StringTable<<BossValue>> )

    method operator?( value:BossValue )->Logical
      if (value.type == TYPE_NULL or value.type == TYPE_UNDEFINED) return false
      return value->Logical

  METHODS
    method add( value:Int32 ) [macro]
      this.add( BossValue(value) )

    method add( value:Int64 ) [macro]
      this.add( BossValue(value) )

    method add( value:Logical ) [macro]
      this.add( BossValue(value) )

    method add( value:Real64 ) [macro]
      this.add( BossValue(value) )

    method add( value:Object ) [macro]
      this.add( BossValue(value) )

    method add( value:String ) [macro]
      this.add( BossValue(value) )

    method add( value:BossValue )
      which (type)
        case TYPE_LIST
          (object as BossValue[]).add( value )

        case TYPE_CUSTOM
          (object as CustomBossValue).add( value )

      endWhich

    method add( other:BossValue[] )
      which (type)
        case TYPE_LIST
          (object as BossValue[]).add( value )

        case TYPE_CUSTOM
          (object as CustomBossValue).add( value )
      endWhich

    method add_all( other:BossValue )
      which (type)
        case TYPE_LIST
          if (other.is_collection)
            if (other.count)
              local this_list = object as BossValue[]
              this_list.reserve( other.count )
              which (other.type)
                case TYPE_LIST
                  this_list.add( forEach in other.object as BossValue[] )
                case TYPE_TABLE
                  local cur = (other.object as StringTable<<BossValue>>).first_entry
                  while (cur)
                    this_list.add( cur.value )
                    cur = cur.next_entry
                  endWhile
                others
                  this_list.add( forEach in other )
              endWhich
            endIf
          else
            add( other )
          endIf

        case TYPE_TABLE
          if (other.is_table)
            local this_table = object as StringTable<<BossValue>>
            local cur = (other.object as StringTable<<BossValue>>).first_entry
            while (cur)
              this_table[ cur.key ] = cur.value
              cur = cur.next_entry
            endWhile
          endIf

        case TYPE_CUSTOM
          (object as CustomBossValue).add_all( other )
      endWhich

    method clear
      which (type)
        case TYPE_LIST
          (object as BossValue[]).clear

        case TYPE_TABLE
          (object as StringTable<<BossValue>>).clear

        case TYPE_CUSTOM
          (object as CustomBossValue).clear
      endWhich

    method cloned->BossValue
      which (type)
        case TYPE_LIST
          return BossValue( TYPE_LIST, 0, (object as BossValue[]).cloned )

        case TYPE_TABLE
          return BossValue( TYPE_TABLE, 0, (object as StringTable<<BossValue>>).cloned )

        case TYPE_CUSTOM
          local clone = (object as CustomBossValue).cloned
          if (clone) return BossValue( TYPE_CUSTOM, 0, clone )
          else       return UndefinedBossValue
      endWhich

    method apply( fn:Function(BossValue)->BossValue )->BossValue
      # Applies the given function to this value and all contained values,
      # rebuilding the value node hierarchy as it goes.
      #
      # Example:
      #   # Print out all strings in a BossValue hierarchy
      #   local fn = function( value:BossValue )->BossValue
      #     if (value.is_string) println value
      #     return value
      #   endFunction
      #   some_value.apply( fn )
      which (type)
        case TYPE_LIST
          forEach (v at index in this_list = object as BossValue[])
            this_list[ index ] = v.apply( fn )
          endForEach

        case TYPE_TABLE
          local cur = (object as StringTable<<BossValue>>).first_entry
          while (cur)
            cur.value = cur.value.apply( fn )
            cur = cur.next_entry
          endWhile

        case TYPE_CUSTOM
          (object as CustomBossValue).apply( fn )

      endWhich

      local result = fn( this )
      if (result is null) return NullBossValue
      else                return result

    method contains( table_key_or_list_value:String )->Logical
      which (type)
        case TYPE_TABLE
          local entry = (object as StringTable<<BossValue>>).find( table_key_or_list_value )
          return entry?
        case TYPE_STRING
          return (object as String).contains( table_key_or_list_value )
        others
          return contains( BossValue(table_key_or_list_value) )
      endWhich

    method contains( table_key_or_list_value:BossValue )->Logical
      which (type)
        case TYPE_LIST:   return (object as BossValue[]).contains( table_key_or_list_value )
        case TYPE_TABLE:  return contains( table_key_or_list_value->String )
        case TYPE_STRING: return contains( table_key_or_list_value->String )
        case TYPE_CUSTOM: return (object as CustomBossValue).contains( table_key_or_list_value )
      endWhich
      return false

      #{
    method contains( query:(Function(BossValue)->Logical) )->Logical
      return first( query ) not instanceOf UndefinedBossValue
      }#

    method count->Int32
      which (type)
        case TYPE_LIST
          return (object as BossValue[]).count

        case TYPE_TABLE
          return (object as StringTable<<BossValue>>).count

        case TYPE_CUSTOM
          return (object as CustomBossValue).count

        others
          return 0
      endWhich

    method count( query:(Function(BossValue)->Logical) )->Int32
      which (type)
        case TYPE_LIST
          local result = 0
          forEach (v in object as BossValue[])
            if (query(v)) ++result
          endForEach
          return result

        case TYPE_TABLE
          local result = 0
          local cur = (object as StringTable<<BossValue>>).first_entry
          while (cur)
            if (query(cur.value)) ++result
            cur = cur.next_entry
          endWhile

        case TYPE_CUSTOM
          return (object as CustomBossValue).count

        others
          return 0

      endWhich

      #{
    method compressed->BossValue
      if (contains("@id_list") and contains("@indexed_data")) return this

      local builder = BossValueIDTableBuilder()
      local indexed_data = encode_indexed( builder )

      local result = @{ "@id_list":builder.id_list, "@indexed_data":indexed_data }
      return result

    method decompressed->BossValue
      if (not contains("@id_list") or not contains("@indexed_data")) return this

      local table = BossValueIDLookupTable( this )
      return this["@indexed_data"].decode_indexed( table )

    method decode_indexed( id_table:BossValueIDLookupTable )->BossValue
      return this

    method encode_indexed( id_table_builder:BossValueIDTableBuilder )->BossValue
      return this

    method ensure_list( key:String )->BossValueList
      # When called on a BossValueTable, ensures that the table contains a list
      # with the given key, creating it if necessary, and returns that list.
      # When called on any other type of BossValue, a new BossValueList
      # will be returned but it won't be stored in a table.
      return @[]

    method ensure_table( key:String )->BossValueTable
      # When called on a BossValueTable, ensures that the table contains a table
      # with the given key, creating it if necessary, and returns that table.
      # When called on any other type of BossValue, a new BossValueTable
      # will be returned but it won't be stored in a table.
      return @{}
      }#

    method first->BossValue
      if (count == 0) return UndefinedBossValue

      which (type)
        case TYPE_LIST:  return (object as BossValue[]).first
        case TYPE_TABLE: return (object as StringTable<<BossValue>>).first_entry.value
        others:          return this[ 0 ]
      endWhich

      #{
    method first( query:(Function(BossValue)->Logical) )->BossValue
      return UndefinedBossValue
    }#

    method get( index:Int32 )->BossValue
      which (type)
        case TYPE_LIST
          return (object as BossValue[])[ index ]

        case TYPE_TABLE
          return (object as StringTable<<BossValue>>)[ index ]

        case TYPE_CUSTOM
          return (object as CustomBossValue)[ index ]

        others
          return UndefinedBossValue
      endWhich

    method get( key:String )->BossValue
      which (type)
        case TYPE_TABLE
          local result = (object as StringTable<<BossValue>>)[ key ]
          if (result ) return result
          else         return UndefinedBossValue

        case TYPE_CUSTOM
          return (object as CustomBossValue)[ key ]

        others
          return UndefinedBossValue
      endWhich

    method get( query:(Function(BossValue)->Logical) )->BossValue
      which (type)
        case TYPE_LIST
          local results = UndefinedBossValue
          forEach (v in object as BossValue[])
            if (query(v))
              if (results.is_undefined) results = BossValue.list
              results.add( v )
            endIf
          endForEach
          return results

        case TYPE_TABLE
          local results = UndefinedBossValue
          local cur = (object as StringTable<<BossValue>>).first_entry
          while (cur)
            if (query(cur.value))
              if (results.is_undefined) results = BossValue.list
              results.add( cur.value )
            endIf
            cur = cur.next_entry
          endWhile
          return results

        case TYPE_CUSTOM
          return (object as CustomBossValue)[ query ]

        others
          return UndefinedBossValue

      endWhich

      #{
    method insert( value:Int32, before_index=0:Int32 )->this [macro]
      return this.insert( BossValue(value), before_index )

    method insert( value:Int64, before_index=0:Int32 )->this [macro]
      return this.insert( BossValue(value), before_index )

    method insert( value:Logical, before_index=0:Int32 )->this [macro]
      return this.insert( BossValue(value), before_index )

    method insert( value:Real64, before_index=0:Int32 )->this [macro]
      return this.insert( BossValue(value), before_index )

    method insert( value:Object, before_index=0:Int32 )->this [macro]
      return this.insert( BossValue(value), before_index )

    method insert( value:String, before_index=0:Int32 )->this [macro]
      return this.insert( BossValue(value), before_index )

    method insert( value:BossValue, before_index=0:Int32 )->this
      return this

    method insert( other:BossValue[], before_index=0:Int32 )->this
      return this

    method insert_all( other:BossValue, before_index=0:Int32 )->this
      if (other.count)
        reserve( other.count )
        forEach (value in other.values step -1) insert( value, before_index )
      else
        insert( other, before_index )
      endIf
      return this
      }#

    method is_complex->Logical
      if (not is_collection or count == 0) return false
      if (count > 1) return true
      return (first.is_complex)

    method is_collection->Logical
      which (type)
        case TYPE_LIST, TYPE_TABLE
          return true

        case TYPE_CUSTOM
          return (object as CustomBossValue).is_collection

        others
          return false
      endWhich

    method is_int32->Logical [macro]
      return this.type == BossValue.TYPE_INT32

    method is_int64->Logical [macro]
      return this.type == BossValue.TYPE_INT64

    method is_list->Logical [macro]
      return this.type == BossValue.TYPE_LIST

    method is_logical->Logical [macro]
      return this.type == BossValue.TYPE_LOGICAL

    method is_null->Logical [macro]
      return this.type == BossValue.TYPE_NULL

    method is_non_null->Logical [macro]
      return this.type != BossValue.TYPE_NULL

    method is_number->Logical
      return select(type){ TYPE_BYTE,TYPE_REAL64,TYPE_INT32,TYPE_INT64:true || false }

    method is_object->Logical [macro]
      return this.type == BossValue.TYPE_UNDEFINED

    method is_real64->Logical [macro]
      return this.type == BossValue.TYPE_UNDEFINED

    method is_string->Logical [macro]
      return this.type == BossValue.TYPE_UNDEFINED

    method is_table->Logical [macro]
      return this.type == BossValue.TYPE_UNDEFINED

    method is_undefined->Logical [macro]
      return this.type == BossValue.TYPE_UNDEFINED

      #{
    method keys->String[]
      return String[]

    method last->BossValue
      return this[ count - 1 ]

    method last( query:(Function(BossValue)->Logical) )->BossValue
      return UndefinedBossValue

    method locate( value:BossValue )->BossValue
      return UndefinedBossValue

    method locate( query:(Function(BossValue)->Logical) )->BossValue
      return UndefinedBossValue

    method locate_last( value:BossValue )->BossValue
      return UndefinedBossValue

    method locate_last( query:(Function(BossValue)->Logical) )->BossValue
      return UndefinedBossValue
      }#

    method operator==( other:BossValue )->Logical
      if ((is_number or type == TYPE_CHARACTER) and (other.is_number or other.type == TYPE_CHARACTER))
        if (is_real64 or other.is_real64)
          return this->Real64 == other->Real64
        else
          return this.value == other.value
        endIf
      elseIf (type != other.type)
        return false
      else
        if (type < LAST_VALUE_TYPE) return value == other.value
        if (object is other.object) return true

        which (type)
          case TYPE_OBJECT
            return object == other.object
          case TYPE_STRING
            return (object as String) == (other.object as String)
          case TYPE_LIST
            return (object as BossValue[]) == (other.object as BossValue[])
          case TYPE_TABLE
            local other_table = other.object as StringTable<<BossValue>>
            local cur = (object as StringTable<<BossValue>>).first_entry
            while (cur)
              local other_entry = other_table.find( cur.key )
              if (not other_entry) return false
              if (other_entry.value != cur.value) return false
              cur = cur.next_entry
            endWhile
            return true
          case TYPE_CUSTOM
            return (object as CustomBossValue) == (other.object as CustomBossValue)
          others
            return false
        endWhich
      endIf


      #{
    method operator==( other:Byte )->Logical
      return this == BossValue( other )

    method operator==( other:Character )->Logical
      return this == BossValue( ""+other )

    method operator==( other:Int32 )->Logical
      return this == BossValue( other )

    method operator==( other:Int64 )->Logical
      return this == BossValue( other )

    method operator==( other:Logical )->Logical
      return this == BossValue( other )

    method operator==( other:Real64 )->Logical
      return this == BossValue( other )

    method operator==( other:Real32 )->Logical
      return this == BossValue( other )

    method operator==( other:Object )->Logical
      return this == BossValue( other )

    method operator==( other:String )->Logical
      return this == BossValue( other )

    method operator<( other:BossValue )->Logical
      return object_id < other.object_id

    method operator<( other:Byte )->Logical
      return this < BossValue( other )

    method operator<( other:Character )->Logical
      return this < BossValue( ""+other )

    method operator<( other:Int32 )->Logical
      return this < BossValue( other )

    method operator<( other:Int64 )->Logical
      return this < BossValue( other )

    method operator<( other:Logical )->Logical
      return this < BossValue( other )

    method operator<( other:Real64 )->Logical
      return this < BossValue( other )

    method operator<( other:Real32 )->Logical
      return this < BossValue( other )

    method operator<( other:Object )->Logical
      return this < BossValue( other )

    method operator<( other:String )->Logical
      return this < BossValue( other )

    method operator-()->BossValue
      return BossValue( 0 )

    method operator+( other:BossValue )->BossValue
      return BossValue( 0 )

    method operator-( other:BossValue )->BossValue
      return BossValue( 0 )

    method operator*( other:BossValue )->BossValue
      return BossValue( 0 )

    method operator/( other:BossValue )->BossValue
      return BossValue( 0 )

    method operator%( other:BossValue )->BossValue
      return BossValue( 0 )

    method operator^( other:BossValue )->BossValue
      return BossValue( 0 )

    method operator+( other:Real64 )->BossValue
      return BossValue( 0 )

    method operator-( other:Real64 )->BossValue
      return BossValue( 0 )

    method operator*( other:Real64 )->BossValue
      return BossValue( 0 )

    method operator/( other:Real64 )->BossValue
      return BossValue( 0 )

    method operator%( other:Real64 )->BossValue
      return BossValue( 0 )

    method operator^( other:Real64 )->BossValue
      return BossValue( 0 )

    method operator+( other:String )->BossValue
      return BossValue( 0 )

    method operator*( other:String )->BossValue
      return BossValue( 0 )

    method remove( value:BossValue )->BossValue
      return value

    method remove( key:String )->BossValue
      return remove( BossValue(key) )

    method remove( query:(Function(BossValue)->Logical) )->BossValue
      return UndefinedBossValue

    method remove_at( index:Int32 )->BossValue
      return remove( this[index] )

    method remove_first->BossValue
      return remove( first )

    method remove_last->BossValue
      return remove( last )

    method reserve( additional_elements:Int32 )->this
      noAction
      return this

    method rest( result_list=null:BossValue )->BossValue
      # Returns the "rest" of this collection: a `BossValueList` containing all of the items
      # in this collection after the first item.  The `result_list` parameter is
      # used if it's specified (a `BossValueList` is expected); otherwise a new `BossValueList`
      # is created and returned.
      #
      # If this `BossValue` is not a collection or if it is empty then an empty list is
      # returned.
      if (not result_list) result_list = @[]
      result_list.reserve( (count-1).clamped_low(0) )

      forEach (index of this)
        if (index > 0) result_list.add( this[index] )
      endForEach

      return result_list

    method save( file:File, &formatted, &omit_commas )->Logical
      return file.save( to_json(formatted,omit_commas) )

    method set( index:Int32, value:Int32 )->this [macro]
      return this.set( index, BossValue(value) )

    method set( index:Int32, value:Int64 )->this [macro]
      return this.set( index, BossValue(value) )

    method set( index:Int32, value:Logical )->this [macro]
      return this.set( index, BossValue(value) )

    method set( index:Int32, value:Real64 )->this [macro]
      return this.set( index, BossValue(value) )

    method set( index:Int32, value:Object )->this [macro]
      return this.set( index, BossValue(value) )

    method set( index:Int32, value:String )->this [macro]
      return this.set( index, BossValue(value) )

    method set( index:Int32, value:BossValue )->this [preferred]
      return this

    method set( key:String, value:Int32 )->this [macro]
      return this.set( key, BossValue(value) )

    method set( key:String, value:Int64 )->this [macro]
      return this.set( key, BossValue(value) )

    method set( key:String, value:Logical )->this [macro]
      return this.set( key, BossValue(value) )

    method set( key:String, value:Real64 )->this [macro]
      return this.set( key, BossValue(value) )

    method set( key:String, value:Object )->this [macro]
      return this.set( key, BossValue(value) )

    method set( key:String, value:String )->this [macro]
      return this.set( key, BossValue(value) )

    method set( key:BossValue, value:BossValue )->this [macro]
      return this.set( key->String, value )

    method set( key:String, value:BossValue )->this [preferred]
      return this

    method sort( compare_fn:(Function(a:BossValue,b:BossValue)->Logical) )->this
      return this

    method sorted( compare_fn:(Function(a:BossValue,b:BossValue)->Logical) )->BossValue
      return cloned

    method to->Byte
      return this->Int32->Byte

    method to->Character
      return Character(0)

    method to->Int64
      return 0

    method to->Int32
      return this->Int64->Int32
      }#

    method to->Logical
      if (type == TYPE_REAL64)    return value.real_bits?
      if (type < LAST_VALUE_TYPE) return value?
      which (type)
        case TYPE_CUSTOM: return (object as CustomBossValue)->Logical
        others
          return true
      endWhich

    method to->Real64
      if (type == TYPE_REAL64)    return value.real_bits
      if (type < LAST_VALUE_TYPE) return value->Real64
      if (type == TYPE_CUSTOM)    return (object as CustomBossValue)->Real64
      return 0.0

      #{
    method to->Real32
      return this->Real64->Real32

    method to->Object
      return null
      }#

    method to->String
      which (type)
        case TYPE_UNDEFINED: return "undefined"
        case TYPE_NULL:      return "null"
        case TYPE_LOGICAL:   return value->Logical
        case TYPE_BYTE:      return value->Byte
        case TYPE_CHARACTER: return value->Character
        case TYPE_INT32:     return value->Int32
        case TYPE_REAL64:    return value.real_bits->String
        case TYPE_INT64:     return value->String
        case TYPE_OBJECT:    return object->String
        case TYPE_STRING:    return object->String
        case TYPE_LIST:      return (object as BossValue[])->String
        case TYPE_TABLE:     return (object as StringTable<<BossValue>>)->String
        case TYPE_CUSTOM:    return (object as CustomBossValue)->String
        others:              throw UnsupportedOperationError()
      endWhich

      #{
    method to->BossValue
      return this

    method to->BossValueList
      return @[ this ]

    method to->BossValueTable
      return @{}

    method to<<$AsType>>()->$AsType [macro]
      return (this->Object as $AsType)

    method to_json( flags:Int32 )->String
      return to_json( StringBuilder(), flags )->String

    method to_json( &formatted, &omit_commas )->String
      return to_json( StringBuilder(), formatted, omit_commas )->String

    method to_json( buffer:StringBuilder, &formatted, &omit_commas )->StringBuilder
      local flags = 0
      if (formatted)   flags |= FORMATTED
      if (omit_commas) flags |= FORMATTED | OMIT_COMMAS
      return to_json( buffer, flags )

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      return buffer

    method values( list=null:BossValue )->BossValue
      if (list)
        list.add_all( this )
        return list
      else
        return this
      endIf

$if defined(SCRIPT_HELPERS)
    method _get_element( index:Int32 )->BossValue [essential]
      throw Error("This BossValue is not indexable")
$endIf
}#
endClass

global UndefinedBossValue = BossValue( BossValue.TYPE_UNDEFINED, 0 )
global NullBossValue = BossValue( BossValue.TYPE_NULL, 0 )

#{
class NullBossValue : BossValue [singleton]
  METHODS
    method init


    method is_non_null->Logical
      return false

    method is_null->Logical
      return true

    method operator==( other:BossValue )->Logical
      return  (other is null or other.is_null)

    method operator<( other:BossValue )->Logical
      return (other and other.is_non_null)

    method to->Int64
      return 0

    method to->String
      return "null"

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      return buffer.print( "null" )
endClass
      }#

#{
class UndefinedBossValue : NullBossValue [singleton]
  METHODS
    method is_undefined->Logical
      return true

    method to->String
      return ""

    method to->BossValueList
      return @[]
endClass

class LogicalBossValue( value:Logical ) : BossValue
  GLOBAL PROPERTIES
    true_value  = LogicalBossValue( true )
    false_value = LogicalBossValue( false )

  METHODS
    method is_logical->Logical
      return true

    method to->Int64
      if (value) return 1
      else       return 0

    method to->Logical
      return value

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class Real64BossValue( value:Real64 ) : BossValue
  METHODS
    method is_number->Logical
      return true

    method is_real64->Logical
      return true

    method operator==( other:BossValue )->Logical
      if (other.is_number)  return (value == other->Real64)
      if (other.is_logical) return ((value != 0) == other->Logical)
      else                  return false

    method operator<( other:BossValue )->Logical
      if (other.is_number) return (value < other->Real64)
      else                 return object_id < other.object_id

    method operator-()->BossValue
      return Real64BossValue( -value )

    method operator+( other:BossValue )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value + other->Real64 )

    method operator-( other:BossValue )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value - other->Real64 )

    method operator*( other:BossValue )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value * other->Real64 )

    method operator/( other:BossValue )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value / other->Real64 )

    method operator%( other:BossValue )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value % other->Real64 )

    method operator^( other:BossValue )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value ^ other->Real64 )

    method operator+( other:Real64 )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value + other )

    method operator-( other:Real64 )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value - other )

    method operator*( other:Real64 )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value * other )

    method operator/( other:Real64 )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value / other )

    method operator%( other:Real64 )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value % other )

    method operator^( other:Real64 )->BossValue
      if (not other) return BossValue(0)
      return Real64BossValue( value ^ other )

    method operator+( other:String )->BossValue
      if (not other) return BossValue(0)
      return StringBossValue( value + other )

    method operator*( other:String )->BossValue
      if (not other) return BossValue(0)
      return StringBossValue( Int32(value) * other )

    method to->Character
      return this->Int32->Character

    method to->Int64
      return value

    method to->Real64
      return value

    method to->String
      return value.format()

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      if (value.fractional_part) buffer.print( value )
      else                       buffer.print( value, 0 )  # omit the ".0"
      return buffer
endClass

class Int32BossValue( value:Int32 ) : BossValue
  METHODS
    method is_number->Logical
      return true

    method is_int32->Logical
      return true

    method operator==( other:BossValue )->Logical
      if (other.is_int32)   return (value == other->Int32)
      if (other.is_int64)   return (value->Int64 == other->Int64)
      if (other.is_number)  return (value->Real64 == other->Real64)
      if (other.is_logical) return (value? == other->Logical)
      else                  return false

    method operator<( other:BossValue )->Logical
      if (other.is_int32)   return (value < other->Int32)
      if (other.is_int64)   return (value->Int64 < other->Int64)
      if (other.is_number)  return (value->Real64 < other->Real64)
      else                  return object_id < other.object_id

    method operator==( other:Real64 )->Logical
      return value == other

    method operator==( other:Int64 )->Logical
      return value == other

    method operator==( other:Int32 )->Logical
      return value == other

    method operator<( other:Real64 )->Logical
      return value < other

    method operator<( other:Int64 )->Logical
      return value < other

    method operator<( other:Int32 )->Logical
      return value < other

    method operator-()->BossValue
      return Int32BossValue( -value )

    method operator+( other:BossValue )->BossValue
      return Int32BossValue( value + other->Int32 )

    method operator-( other:BossValue )->BossValue
      return Int32BossValue( value - other->Int32 )

    method operator*( other:BossValue )->BossValue
      return Int32BossValue( value * other->Int32 )

    method operator/( other:BossValue )->BossValue
      local d = other->Int32
      if (d == 0) return UndefinedBossValue
      return Int32BossValue( value / d )

    method operator%( other:BossValue )->BossValue
      local d = other->Int32
      if (d == 0) return UndefinedBossValue
      return Int32BossValue( value % d )

    method operator^( other:BossValue )->BossValue
      return Int32BossValue( value ^ other->Int32 )

    method operator+( other:Int32 )->BossValue
      return Int32BossValue( value + other )

    method operator-( other:Int32 )->BossValue
      return Int32BossValue( value - other )

    method operator*( other:Int32 )->BossValue
      return Int32BossValue( value * other )

    method operator/( other:Int32 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int32BossValue( value / other )

    method operator%( other:Int32 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int32BossValue( value % other )

    method operator^( other:Int32 )->BossValue
      return Int32BossValue( value ^ other )

    method operator+( other:Int64 )->BossValue
      return Int64BossValue( value + other )

    method operator-( other:Int64 )->BossValue
      return Int64BossValue( value - other )

    method operator*( other:Int64 )->BossValue
      return Int64BossValue( value * other )

    method operator/( other:Int64 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int64BossValue( value / other )

    method operator%( other:Int64 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int64BossValue( value % other )

    method operator^( other:Int64 )->BossValue
      return Int64BossValue( value ^ other )

    method operator+( other:Real64 )->BossValue
      return Real64BossValue( value + other )

    method operator-( other:Real64 )->BossValue
      return Real64BossValue( value - other )

    method operator*( other:Real64 )->BossValue
      return Real64BossValue( value * other )

    method operator/( other:Real64 )->BossValue
      return Real64BossValue( value / other )

    method operator%( other:Real64 )->BossValue
      return Real64BossValue( value % other )

    method operator^( other:Real64 )->BossValue
      return Real64BossValue( value ^ other )

    method operator+( other:String )->BossValue
      return StringBossValue( value + other )

    method operator*( other:String )->BossValue
      return StringBossValue( Int32(value) * other )

    method to->Character
      return value->Character

    method to->Int32
      return value

    method to->Int64
      return value

    method to->Real64
      return value->Real64

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      buffer.print( value )
      return buffer
endClass
}#

#{
class Int64BossValue( value:Int64 ) : BossValue
  METHODS
    method is_number->Logical
      return true

    method is_int64->Logical
      return true

    method operator==( other:BossValue )->Logical
      if (other.is_int64 or other.is_int32) return (value == other->Int64)
      if (other.is_number)                  return (value->Real64 == other->Real64)
      if (other.is_logical)                 return (value? == other->Logical)
      else                                  return false

    method operator<( other:BossValue )->Logical
      if (other.is_int64 or other.is_int32) return (value < other->Int64)
      if (other.is_number)                  return (value->Real64 < other->Real64)
      else                                  return object_id < other.object_id

    method operator==( other:Real64 )->Logical
      return value == other

    method operator==( other:Int64 )->Logical
      return value == other

    method operator==( other:Int32 )->Logical
      return value == other

    method operator<( other:Real64 )->Logical
      return value < other

    method operator<( other:Int64 )->Logical
      return value < other

    method operator<( other:Int32 )->Logical
      return value < other

    method operator-()->BossValue
      return Int64BossValue( -value )

    method operator+( other:BossValue )->BossValue
      return Int64BossValue( value + other->Int64 )

    method operator-( other:BossValue )->BossValue
      return Int64BossValue( value - other->Int64 )

    method operator*( other:BossValue )->BossValue
      return Int64BossValue( value * other->Int64 )

    method operator/( other:BossValue )->BossValue
      local d = other->Int64
      if (d == 0) return UndefinedBossValue
      return Int64BossValue( value / d )

    method operator%( other:BossValue )->BossValue
      local d = other->Int64
      if (d == 0) return UndefinedBossValue
      return Int64BossValue( value % d )

    method operator^( other:BossValue )->BossValue
      return Int64BossValue( value ^ other->Int64 )

    method operator+( other:Int64 )->BossValue
      return Int64BossValue( value + other )

    method operator-( other:Int64 )->BossValue
      return Int64BossValue( value - other )

    method operator*( other:Int64 )->BossValue
      return Int64BossValue( value * other )

    method operator/( other:Int64 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int64BossValue( value / other )

    method operator%( other:Int64 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int64BossValue( value % other )

    method operator^( other:Int64 )->BossValue
      return Int64BossValue( value ^ other )

    method operator+( other:Int32 )->BossValue
      return Int64BossValue( value + other )

    method operator-( other:Int32 )->BossValue
      return Int64BossValue( value - other )

    method operator*( other:Int32 )->BossValue
      return Int64BossValue( value * other )

    method operator/( other:Int32 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int64BossValue( value / other )

    method operator%( other:Int32 )->BossValue
      if (other == 0) return UndefinedBossValue
      return Int64BossValue( value % other )

    method operator^( other:Int32 )->BossValue
      return Int64BossValue( value ^ other )

    method operator+( other:Real64 )->BossValue
      return Real64BossValue( value + other )

    method operator-( other:Real64 )->BossValue
      return Real64BossValue( value - other )

    method operator*( other:Real64 )->BossValue
      return Real64BossValue( value * other )

    method operator/( other:Real64 )->BossValue
      return Real64BossValue( value / other )

    method operator%( other:Real64 )->BossValue
      return Real64BossValue( value % other )

    method operator^( other:Real64 )->BossValue
      return Real64BossValue( value ^ other )

    method operator+( other:String )->BossValue
      return StringBossValue( value + other )

    method operator*( other:String )->BossValue
      return StringBossValue( Int32(value) * other )

    method to->Character
      return value->Character

    method to->Int32
      return value

    method to->Int64
      return value

    method to->Real64
      return value->Real64

    method to->String
      return value->String

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      buffer.print( value )
      return buffer
endClass

class ObjectBossValue( value:Object ) : BossValue
  METHODS
    method is_object->Logical
      return true

    method to->Logical
      return (value is not null)

    method to->Object
      return value

    method to->String
      return value->String

    method to->BossValueTable
      return value->BossValueTable

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      buffer.print( value->String )
      return buffer
endClass

class StringBossValue( value:String ) : BossValue
  GLOBAL PROPERTIES
    empty_string = StringBossValue( "" )

  METHODS
    method count->Int32
      return value.count

    method decode_indexed( id_table:BossValueIDLookupTable )->BossValue
      return id_table[ value ]

    method encode_indexed( id_table_builder:BossValueIDTableBuilder )->BossValue
      return id_table_builder[ this ]

    method get( index:Int32 )->BossValue
      if (index < 0 or index >= value.count) return UndefinedBossValue
      return BossValue( ""+value[index] )

    method is_string->Logical
      return true

    method operator==( other:BossValue )->Logical
      if (other.is_string) return (value == other->String)
      else                 return false

    method operator<( other:BossValue )->Logical
      if (other.is_string) return (value < other->String)
      else                 return object_id < other.object_id

    method operator+( other:BossValue )->BossValue
      return StringBossValue( value + other->String )

    method operator*( other:BossValue )->BossValue
      return StringBossValue( value * other->Int32 )

    method operator+( other:Real64 )->BossValue
      return StringBossValue( value + other )

    method operator+( other:String )->BossValue
      return StringBossValue( value + other )

    method to->Character
      if (value.count > 0) return value[0]
      else                 return 0->Character

    method to->Int64
      return value->Int64

    method to->Logical
      return true

    method to->Real64
      return value->Real64

    method to->Object
      return value

    method to->String
      return value

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      return to_json( value, buffer, flags )

  GLOBAL METHODS
    method to_json( value:String, buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      if (value)
        buffer.print '"'
        forEach (ch in value)
          which (ch)
            case '"':
              buffer.print( "\\\"" )
            case '\\':
              buffer.print( "\\\\" )
            case '\b':
              buffer.print( "\\b" )
            case '\f':
              buffer.print( "\\f" )
            case '\n':
              buffer.print( "\\n" )
            case '\r':
              buffer.print( "\\r" )
            case '\t':
              buffer.print( "\\t" )
            others
              if (ch >= 32 and ch <= 126)
                buffer.print( ch )
              elseIf (ch < 32 or ch == 127 or ch == 0x2028 or ch == 0x2029)
                # RE: 2028/9:
                # http://stackoverflow.com/questions/2965293/javascript-parse-error-on-u2028-unicode-character
                buffer.print( "\\u" )
                local n = ch : Int32
                forEach (nibble in 0..3)
                  local digit = (n :>>>: 12) & 15
                  n = n:<<:4
                  if (digit <= 9)
                    buffer.print( digit )
                  else
                    buffer.print( ('a' + (digit - 10))->Character )
                  endIf
                endForEach
              else
                # Store printable Unicode without encoding as \\uXXXX
                buffer.print( ch )
              endIf
          endWhich
        endForEach
        buffer.print '"'
      else
        buffer.print "null"
      endIf
      return buffer
endClass
}#

#{
class BossValueList : BossValue
  PROPERTIES
    data : BossValue[]

  METHODS
    method init
      init( 0 )

    method init( initial_capacity:Int32 )
      data = BossValue[]( initial_capacity )

    method init( data )

    method cloned->BossValueList
      local result = BossValueList( count )
      forEach (value in this)
        if (value) result.add( value.cloned )
      endForEach
      return result

    method apply( fn:Function(BossValue)->BossValue )->BossValue
      forEach (i of data)
        data[i] = data[i].apply( fn )
      endForEach

      local result = fn( this )
      if (result is null) return NullBossValue
      else                return result

    method decode_indexed( id_table:BossValueIDLookupTable )->BossValue
      local result = BossValueList( BossValue[](count) )
      result.add( (forEach in data).decode_indexed(id_table) )
      return result

    method encode_indexed( id_table_builder:BossValueIDTableBuilder )->BossValue
      local result = BossValueList( BossValue[](count) )
      result.add( (forEach in data).encode_indexed(id_table_builder) )
      return result

    method add( value:BossValue )->this
      data.add( value )
      return this

    method add( other:BossValue[] )->this
      data.add( other )
      return this

    method insert( value:BossValue, before_index=0:Int32 )->this
      data.insert( value, before_index )
      return this

    method insert( other:BossValue[], before_index=0:Int32 )->this
      data.insert( other, before_index )
      return this

    method clear->BossValueList
      data.clear
      return this

    method contains( value:String )->Logical
      forEach (existing in data)
        if (existing and existing.is_string and existing->String == value) return true
      endForEach
      return false

    method contains( value:BossValue )->Logical
      forEach (existing in data)
        if (existing and existing == value) return true
      endForEach
      return false

    method count->Int32
      return data.count

    method count( query:(Function(BossValue)->Logical) )->Int32
      local result = 0
      forEach (v in data)
        if (query(v)) ++result
      endForEach
      return result

    method first->BossValue
      return this.get(0)

    method first( query:(Function(BossValue)->Logical) )->BossValue
      forEach (v in data)
        if (query(v)) return v
      endForEach
      return UndefinedBossValue

    method get( index:Int32 )->BossValue
      if (index < 0 or index >= data.count) return UndefinedBossValue
      local result = data[ index ]
      if (result is null) return UndefinedBossValue
      return result

    method get( query:(Function(BossValue)->Logical) )->BossValue
      local results : BossValueList
      forEach (value in this)
        if (query(value))
          ensure results
          results.add( value )
        endIf
      endForEach

      if (results) return results
      else         return UndefinedBossValue

    method is_collection->Logical
      return true

    method is_list->Logical
      return true

    method last->BossValue
      return this.get( data.count - 1 )

    method last( query:(Function(BossValue)->Logical) )->BossValue
      forEach (v in data step -1)
        if (query(v)) return v
      endForEach
      return UndefinedBossValue

    method locate( value:BossValue )->BossValue
      forEach (v at index in this)
        if (v == value) return index
      endForEach
      return UndefinedBossValue

    method locate( query:(Function(BossValue)->Logical) )->BossValue
      forEach (value at index in this)
        if (query(value)) return index
      endForEach
      return UndefinedBossValue

    method locate_last( value:BossValue )->BossValue
      forEach (v at index in this step -1)
        if (v == value) return index
      endForEach
      return UndefinedBossValue

    method locate_last( query:(Function(BossValue)->Logical) )->BossValue
      forEach (value at index in this step -1)
        if (query(value)) return index
      endForEach
      return UndefinedBossValue

    method remove( value:BossValue )->BossValue
      return data.remove( value )

    method remove( query:(Function(BossValue)->Logical) )->BossValue
      local results = this[ query ]
      if (not results) return results

      forEach (v in results) remove( v )
      return results

    method remove_at( index:Int32 )->BossValue
      return data.remove_at( index )

    method remove_first->BossValue
      return data.remove_first

    method remove_last->BossValue
      return data.remove_last

    method reserve( additional_elements:Int32 )->this
      data.reserve( additional_elements )
      return this

    method set( index:Int32, new_value:BossValue )->BossValue [preferred]
      if (index < 0) return this

      while (index >= data.count) add( NullBossValue )

      if (new_value is null) new_value = NullBossValue
      data.set( index, new_value )

      return this

    method sort( compare_fn:(Function(a:BossValue,b:BossValue)->Logical) )->this
      data.sort( compare_fn )
      return this

    method sorted( compare_fn:(Function(a:BossValue,b:BossValue)->Logical) )->BossValueList
      return cloned.sort( compare_fn ) as BossValueList

    method to->Logical
      return true

    method to->String
      return data->String

    method to->BossValueList
      return this

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      local pretty_print = ((flags & FORMATTED) and (is_complex or (flags & OMIT_COMMAS)))

      buffer.print( '[' )

      if (pretty_print)
        buffer.println
        buffer.indent += 2
      endIf

      local first = true
      forEach (value in data)
        if (first)
          first = false
        else
          if (not (flags & OMIT_COMMAS)) buffer.print( ',' )
          if (pretty_print) buffer.println
        endIf

        if (value is not null and (value or value.is_logical)) value.to_json( buffer, flags )
        else                                                   buffer.print( "null" )
      endForEach

      if (pretty_print)
        buffer.println
        buffer.indent -= 2
      endIf

      buffer.print( ']' )
      return buffer

$if defined(SCRIPT_HELPERS)
    method _get_element( index:Int32 )->BossValue [essential]
      if (index < 0 or index >= count)
        throw Error("Index out of range")
      endIf
      return get(index)
$endIf

    GLOBAL METHODS
      method load( file:File )->BossValueList
        if (not file or not file.exists) return BossValueList()
        return JSON.parse_list( file.load_as_string )

      method parse( json:String )->BossValueList
        return JSON.parse_list( json )
endClass

class BossValueTable
  PROPERTIES
    data    : Table<<String,BossValue>>

  METHODS
    method init
      data = Table<<String,BossValue>>()

    method init( data )

    method cloned->BossValueTable
      local result_data = data.cloned

      local cur = result_data.first_entry
      while (cur)
        if (cur.value) cur.value = cur.value.cloned
        cur = cur.next_entry
      endWhile

      return BossValueTable( result_data )

    method apply( fn:Function(BossValue)->BossValue )->BossValue
      local cur = data.first_entry
      while (cur)
        cur.value = cur.value.apply( fn )
        cur = cur.next_entry
      endWhile

      local result = fn( this )
      if (result is null) return NullBossValue
      else                return result

    method clear->this
      data.clear
      return this

    method contains( key:String )->Logical
      return data.contains( key )

    method contains( key:BossValue )->Logical
      if (not key or not key.is_string) return false
      return contains( key->String )

    method count->Int32
      return data.count

    method count( query:(Function(BossValue)->Logical) )->Int32
      local result = 0
      forEach (v in data.value_reader)
        if (query(v)) ++result
      endForEach
      return result

    method decode_indexed( id_table:BossValueIDLookupTable )->BossValue
      local result = @{}

      local cur = data.first_entry
      while (cur)
        local key = BossValue( cur.key ).decode_indexed( id_table )
        local value = cur.value.decode_indexed( id_table )
        result[ key ] = value
        cur = cur.next_entry
      endWhile

      return result

    method encode_indexed( id_table_builder:BossValueIDTableBuilder )->BossValue
      local result = @{}

      local cur = data.first_entry
      while (cur)
        local key = BossValue( cur.key ).encode_indexed( id_table_builder )
        local value = cur.value.encode_indexed( id_table_builder )
        result[ key ] = value
        cur = cur.next_entry
      endWhile

      return result

    method ensure_list( key:String )->BossValueList
      # Ensures that this table contains a list with the given key, creating
      # it if necessary, and returns that list.
      local list = this[ key ] as BossValueList
      if (list) return list
      list = @[]
      this[ key ] = list
      return list

    method ensure_table( key:String )->BossValueTable
      # Ensures that this table contains a table with the given key, creating
      # it if necessary, and returns that table.
      local table = this[ key ] as BossValueTable
      if (table) return table
      table = @{}
      this[ key ] = table
      return table

    method first( query:(Function(BossValue)->Logical) )->BossValue
      forEach (key in keys)
        local v = this[ key ]
        if (query(v)) return v
      endForEach
      return UndefinedBossValue

    method get( index:Int32 )->BossValue
      if (index < 0 or index >= count) return UndefinedBossValue
      local result = data[ keys[index] ]
      if (result is null) return UndefinedBossValue
      return result

    method get( key:String )->BossValue
      local result = data[ key ]
      if (result is null) return UndefinedBossValue
      return result

    method get( query:(Function(BossValue)->Logical) )->BossValue
      local results : BossValueList
      forEach (key in keys)
        local value = this[key]
        if (query(value))
          ensure results
          results.add( value )
        endIf
      endForEach

      if (results is null) return UndefinedBossValue
      return results

    method is_collection->Logical
      return true

    method is_table->Logical
      return true

    method keys->String[]
      return data.keys

    method last( query:(Function(BossValue)->Logical) )->BossValue
      forEach (key in keys step -1)
        local v = this[ key ]
        if (query(v)) return v
      endForEach
      return UndefinedBossValue

    method locate( value:BossValue )->BossValue
      local cur = data.first_entry
      while (cur)
        if (cur.value == value) return cur.key
        cur = cur.next_entry
      endWhile
      return UndefinedBossValue

    method locate( query:(Function(BossValue)->Logical) )->BossValue
      forEach (key in keys)
        if (query(this[key])) return key
      endForEach
      return UndefinedBossValue

    method locate_last( value:BossValue )->BossValue
      return locate( value )

    method locate_last( query:(Function(BossValue)->Logical) )->BossValue
      return locate( query )

    method remove( value:BossValue )->BossValue
      return remove( value->String )

    method remove( key:String )->BossValue
      return data.remove( key )

    method remove( query:(Function(BossValue)->Logical) )->BossValue
      local remove_keys : String[]
      local results : @[]

      forEach (key in keys)
        local v = this[ key ]
        if (query(v))
          ensure results
          ensure remove_keys
          remove_keys.add( key )
          results.add( v )
        endIf
      endForEach

      if (remove_keys is null) return UndefinedBossValue
      forEach (key in remove_keys) remove( key )
      return results

    method remove_at( index:Int32 )->BossValue
      if (index < 0 or index >= count) return UndefinedBossValue
      return data.remove( data.keys[index] )

    method set( index:Int32, value:BossValue )->this [preferred]
      return set( ""+index, value )

    method set( key:String, new_value:BossValue )->this [preferred]
      if (new_value is null) new_value = NullBossValue
      data.set( key, new_value )
      return this

    method sort( compare_fn:(Function(a:BossValue,b:BossValue)->Logical) )->this
      data.sort( function(a,b) with(compare_fn) => compare_fn(a.value,b.value) )
      return this

    method to->Logical
      return true

    method to->String
      return data->String

    method to->BossValueTable
      return this

    method to_json( buffer:StringBuilder, flags=0:Int32 )->StringBuilder
      local pretty_print = ((flags & FORMATTED) and (is_complex or (flags & OMIT_COMMAS)))

      buffer.print( '{' )

      if (pretty_print)
        buffer.println
        buffer.indent += 2
      endIf

      local first = true
      forEach (key in data.keys)
        if (first)
          first = false
        else
          if (not (flags & OMIT_COMMAS)) buffer.print( ',' )
          if (pretty_print) buffer.println
        endIf

        StringBossValue.to_json( key, buffer, flags )
        buffer.print( ':' )

        local indent = false
        local value = data[key]
        if (pretty_print and ((value and value.is_complex) or (flags & OMIT_COMMAS)))
          buffer.println
          indent = (value is null) or (not value.is_collection)
          if (indent) buffer.indent += 2
        endIf

        if (value is not null and (value or value.is_logical)) value.to_json( buffer, flags )
        else                                                   buffer.print( "null" )

        if (indent) buffer.indent -= 2
      endForEach

      if (pretty_print) buffer.println; buffer.indent -= 2

      buffer.print( '}' )
      return buffer

    method values( list=null:BossValue )->BossValue
      if (not list) list = @[]( count )

      local cur = data.first_entry
      while (cur)
        list.add( cur.value )
        cur = cur.next_entry
      endWhile

      return list

$if defined(SCRIPT_HELPERS)
    method _get_element( index:Int32 )->BossValue [essential]
      if (index < 0 or index >= count)
        throw Error("Index out of range")
      endIf
      return get(index)

    method _get_element( key:String )->BossValue [essential]
      return get(key)
$endIf

    GLOBAL METHODS
      method load( file:File )->BossValueTable
        if (not file or not file.exists) return BossValueTable()
        return JSON.parse_table( file.load_as_string )

      method parse( json:String )->BossValueTable
        return JSON.parse_table( json )
endClass
}#

#{
class BossValueIDTableBuilder
  PROPERTIES
    id_table = @{}
    id_list  = @[]

  METHODS
    method get( value:BossValue )->BossValue
      local text = value->String
      local encoded_value = id_table[ text ]
      if (encoded_value) return encoded_value

      if (id_list.count.digit_count + 1 >= text.count and not text.begins_with('@'))
        # Encoded ID would be equal to or larger than the original; just leave it as-is.
        return value
      endIf

      encoded_value = "@" + id_list.count
      id_table[ text ] = encoded_value

      id_list.add( value )

      return encoded_value

endClass

class BossValueIDListFragmenter
  PROPERTIES
    fragmentation_threshold : Int32
    index_list  = BossValueIDFragment[]
    list        = BossValueIDFragment[]
    fragments   = BossValueIDFragment[]
    lookup      = Table<<String,BossValueIDFragment>>()

  METHODS
    method init( original_list:BossValue, fragmentation_threshold=8 )
      forEach (value in original_list)
        index_list.add( get_entry(value->String) )
      endForEach

      while (refine_list) noAction

      (forEach in index_list).generate_fragment_list

    method output_index_list->@[]
      local result = @[]
      result.add( (forEach in index_list).index )
      return result

    method output_fragment_list->@[]
      local result = @[]
      forEach (f in fragments)
        if (f.left_fragment) result.add( @[ f.left_fragment.index, f.right_fragment.index ] )
        else                 result.add( f.value )
      endForEach
      return result

    method refine_list->Logical
      # Remove any compound entries
      list.remove( (entry) => entry.left_fragment? )

      # Sort "leaf" entries
      list.sort( (a,b) => a.value < b.value )

      local made_changes = false

      local limit = list.count
      local index = 1
      while (index < limit)
        made_changes |= process( list[index-1], list[index] )
        ++index
      endWhile

      return made_changes

    method get_entry( value:String )->BossValueIDFragment
      local existing = lookup[ value ]
      if (existing) return existing

      local entry = BossValueIDFragment( this, value )
      list.add( entry )
      return entry

    method process( a:BossValueIDFragment, b:BossValueIDFragment )->Logical
      if (a.left_fragment or b.left_fragment) return false

      local len = a.value.leftmost_common_substring_count( b.value )
      if (len <= fragmentation_threshold) return false

      local common = get_entry( a.value.leftmost(len) )

      if (a.value.count > len)
        a.left_fragment  = common
        a.right_fragment = get_entry( a.value.rightmost(-len) )
      endIf

      if (b.value.count > len)
        b.left_fragment  = common
        b.right_fragment = get_entry( b.value.rightmost(-len) )
      endIf

      return true
endClass


class BossValueIDFragment
  PROPERTIES
    fragmenter     : BossValueIDListFragmenter
    value          : String
    left_fragment  : BossValueIDFragment
    right_fragment : BossValueIDFragment

    index          : Int32
    is_written     : Logical

  METHODS
    method init( fragmenter, value )
      fragmenter.lookup[ value ] = this

    method generate_fragment_list
      if (is_written)  return
      is_written = true

      if (left_fragment)  left_fragment.generate_fragment_list
      if (right_fragment) right_fragment.generate_fragment_list

      index = fragmenter.fragments.count
      fragmenter.fragments.add( this )

    method to_debug_string->String
      if (left_fragment)
        return "$ [$ $]" (this->String,left_fragment.to_debug_string,right_fragment.to_debug_string)
      else
        return value
      endIf

    method to->String
      if (left_fragment)
        return left_fragment->String + right_fragment->String
      else
        return value
      endIf

endClass


class BossValueIDLookupTable
  PROPERTIES
    id_list   = @[]

  METHODS
    method init( info:BossValue )
      id_list = info[ "@id_list" ]

    method get( index_string:String )->BossValue
      if (not index_string.begins_with('@')) return index_string

      local index = 0
      forEach (ch at i in index_string)
        if (i > 0)
          index = index * 10 + (ch - '0')
        endIf
      endForEach

      if (index < 0 or index >= id_list.count) return "(ERROR)"

      return id_list[ index ]

endClass
}#
