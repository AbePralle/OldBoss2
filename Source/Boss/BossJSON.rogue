module Boss

#{
class BossJSON
  GLOBAL METHODS
    method load( file:File )->BossValue
      if (not file or not file.exists) return UndefinedBossValue
      return parse( file.load_as_string )

    method load_list( file:File )->BossValue
      if (not file or not file.exists) return BossValue.list
      return parse_list( file.load_as_string )

    method load_table( file:File )->BossValue
      if (not file or not file.exists) return BossValue.table
      return parse_table( file.load_as_string )

    method parse( json:String )->BossValue
      try
        return BossJSONParser( json ).parse_value
      catch (BossJSONParseError)
        return UndefinedBossValue
      endTry

    method parse_list( json:String )->BossValue
      local list = parse( json )
      if (list.is_list) return list
      return BossValue.list

    method parse_table( json:String )->BossValue
      local table = parse( json )
      if (table.is_table) return table
      return BossValue.table

    method save( value:BossValue, file:File, &formatted, &omit_commas )->Logical
      return value.save( file, formatted, omit_commas  )

endClass

class BossJSONParseError( message ) : Error;

class BossJSONParser
  PROPERTIES
    reader : Scanner

  METHODS
    method init( json:String )
      reader = Scanner( json )

    method init( reader )

    method consume( ch:Character )->Logical
      return reader.consume( ch )

    method has_another->Logical
      return reader.has_another

    method next_is( ch:Character )->Logical
      return (reader.peek == ch)

    method parse_value->BossValue
      consume_spaces_and_eols

      if (not reader.has_another) return UndefinedBossValue

      local ch = reader.peek
      if (ch == '{') return parse_table
      if (ch == '[') return parse_list

      if (ch == '-')               return parse_number
      if (ch >= '0' and ch <= '9') return parse_number

      if (ch == '"' or ch == '\'')
        local result = parse_string
        if (result.count == 0) return BossValue( "" )

        local first_ch = result[ 0 ]
        if (first_ch == 't' and result == "true")  return BossValue( true )
        if (first_ch == 'f' and result == "false") return BossValue( false )
        if (first_ch == 'n' and result == "null")  return NullBossValue

        return BossValue( result )

      elseIf (next_is_identifier)
        local result = parse_identifier
        if (result.count == 0) return BossValue( "" )

        local first_ch = result[ 0 ]
        if (first_ch == 't' and result == "true")  return BossValue( true )
        if (first_ch == 'f' and result == "false") return BossValue( true )
        if (first_ch == 'n' and result == "null")  return NullBossValue

        return BossValue( result )
      else
        return UndefinedBossValue
      endIf

    method parse_table( open_ch='{':Character, close_ch='}':Character )->BossValue
      consume_spaces_and_eols

      if (not reader.consume(open_ch)) return UndefinedBossValue

      consume_spaces_and_eols

      local table = BossValue.table
      if (reader.consume(close_ch)) return table

      local prev_pos = reader.position
      local first = true
      while (first or reader.consume(',') or (reader.has_another and reader.peek!=close_ch and reader.position>prev_pos))
        first = false
        prev_pos = reader.position

        consume_spaces_and_eols

        if (next_is_identifier)
          local key = parse_identifier
          consume_spaces_and_eols

          if (key.count)
            if (reader.consume(':'))
              consume_spaces_and_eols
              local value = parse_value
              table.set( key, value )
            else
              table.set( key, true )
            endIf
            consume_spaces_and_eols
          endIf
        endIf
      endWhile

      if (not reader.consume(close_ch)) throw BossJSONParseError( "'$' expected."(close_ch) )

      return table

    method parse_list( open_ch='[':Character, close_ch=']':Character )->BossValue
      consume_spaces_and_eols

      if (not reader.consume(open_ch)) return UndefinedBossValue

      consume_spaces_and_eols

      local list = BossValue.list
      if (reader.consume(close_ch)) return list

      local prev_pos = reader.position
      local first = true
      while (first or reader.consume(',') or (reader.has_another and reader.peek!=close_ch and reader.position>prev_pos))
        first = false
        prev_pos = reader.position
        consume_spaces_and_eols
        if (reader.peek == close_ch) escapeWhile
        list.add( parse_value )
        consume_spaces_and_eols
      endWhile

      if (not reader.consume(close_ch)) throw BossJSONParseError( "'$' expected." (close_ch) )

      return list

    method parse_string->String
      consume_spaces_and_eols

      local terminator = '"'
      if     (reader.consume( '"' ))  terminator = '"'
      elseIf (reader.consume( '\'' )) terminator = '\''

      if (not reader.has_another) return ""

      use buffer = StringBuilder.pool
        buffer.clear
        local ch = reader.read
        while (reader.has_another and ch != terminator)
          if (ch == '\\')
            ch = reader.read
            if (ch == 'b')     buffer.print( '\b' )
            elseIf (ch == 'f') buffer.print( '\f' )
            elseIf (ch == 'n') buffer.print( '\n' )
            elseIf (ch == 'r') buffer.print( '\r' )
            elseIf (ch == 't') buffer.print( '\t' )
            elseIf (ch == 'u') buffer.print( parse_hex_quad )
            else               buffer.print( ch )
          else
            buffer.print( ch )
          endIf
          ch = reader.read
        endWhile

        return buffer->String.consolidated
      endUse

    method hex_character_to_value( ch:Character )->Int32 [macro]
      return ch.to_number

    method parse_hex_quad->Character
      local code = 0
      forEach (i in 1..4)
        if (reader.has_another)
          code = (code :<<: 4) | hex_character_to_value(reader.read)
        endIf
      endForEach
      return code->Character

    method parse_identifier->String
      consume_spaces_and_eols

      local ch = reader.peek
      if (ch == '"' or ch == '\'')
        return parse_string
      else
        use buffer = StringBuilder.pool
          buffer.clear
          local finished = false
          while (not finished and reader.has_another)
            if (ch.is_identifier(&allow_dollar))
              reader.read
              buffer.print( ch->Character )
              ch = reader.peek
            else
              finished = true
            endIf
          endWhile

          if (buffer.count == 0) throw BossJSONParseError( "Identifier expected." )
          return buffer->String.consolidated
        endUse
      endIf

    method peek->Character
      return reader.peek

    method next_is_identifier->Logical
      local ch = reader.peek
      if (ch.is_identifier(&start,&allow_dollar)) return true
      return (ch == '"' or ch == '\'')

    method parse_number->BossValue
      consume_spaces_and_eols

      local sign = 1.0
      if (reader.consume( '-' ))
        sign = -1.0
        consume_spaces_and_eols
      endIf

      local n = 0.0
      local ch = reader.peek
      while (reader.has_another and ch >= '0' and ch <= '9')
        reader.read
        n = n * 10 + (ch - '0')
        ch = reader.peek
      endWhile

      if (reader.consume( '.' ))
        local decimal = 0.0
        local power = 0.0
        ch = reader.peek
        while (reader.has_another and ch >= '0' and ch <= '9')
          reader.read
          decimal = decimal * 10 + (ch - '0')
          power += 1.0
          ch = reader.peek
        endWhile
        n += decimal / (10.0 ^ power)
      endIf

      if (reader.consume( 'e' ) or reader.consume( 'E' ))
        local negexp = false
        if (not reader.consume('+') and reader.consume('-')) negexp = true

        local power = 0.0
        ch = reader.peek
        while (reader.has_another and ch >= '0' and ch <= '9')
          reader.read
          power = power * 10.0 + (ch - '0')
          ch = reader.peek
        endWhile

        if (negexp) n /= 10 ^ power
        else        n *= 10 ^ power
      endIf

      n = n * sign

      if (n.fractional_part)
        return BossValue( n )
      else
        local as_int32 = n->Int32
        if (n == as_int32) return BossValue( as_int32 )
        local as_int64 = n->Int64
        if (n == as_int64) return BossValue( as_int64 )
        return BossValue( n )
      endIf

    method read->Character
      return reader.read

    method consume_spaces
      while (reader.consume_spaces) noAction

    method consume_spaces_and_eols
      while (reader.consume_spaces or reader.consume_eols) noAction

endClass

}#
