# To run this build file, install Rogue from github.com/AbePralle/Rogue and type "rogo" at the command line.

#$ ROGUEC_ARGS = --api

# Rogo is a "build your own build system" facilitator. At its core Rogo just recompiles build files if
# needed and then runs the build executable while forwarding any command line arguments. This file contains
# a default framework which uses introspection to turn command line arguments into parameterized routine calls.

# Example: to handle the command "rogo abc xyz 5", define "routine rogo_abc_xyz( n:Int32 )".

# "rogo_default" will run in the absence of any other command line argument.

augment Build
  PROPERTIES
    BINDIR   = "/usr/local/bin"
    BOSS_EXE = "Build/Rogue/Boss-$" (System.os)
    SUDO_CMD = ""
endAugment

routine rogo_default
  rogo_boss
endRoutine

routine rogo_test
  rogo_build
  execute "boss Test.boss"
endRoutine

routine rogo_clean
  File.delete( "Build" )
endRoutine

routine rogo_boss
  rogo_build
  rogo_run
endRoutine

routine rogo_build
  rogo_build_java
endRoutine

routine rogo_build_java
  File.create_folder( "Build/Java" )
  local class_files = Files( "Build/Java", "**.class" )
  forEach (java_filepath in Files("Source/Java","**.java"))
    local class_filepath = "Build/$.class" (java_filepath.after_first("Source/").before_last(".java"))
    class_files.remove( class_filepath )
    if (File.is_newer_than(java_filepath,class_filepath))
      execute "javac -d Build/Java $/*" (File.path(java_filepath))
    endIf
  endForEach

  if (class_files.count)
    # Delete vestigial .class files that no longer have a .java source
    File.delete( forEach in class_files )
  endIf

  build_java_launcher
endRoutine

routine build_java_launcher
  if (System.os == "Windows") return
  local launcher_filepath = "$/boss" (Build.BINDIR)
  if (File.exists(launcher_filepath)) return
  println "-------------------------------------------------------------------------------"
  println "Creating $/boss launcher linked to $" (Build.BINDIR,Build.BOSS_EXE)
  println "-------------------------------------------------------------------------------"
  create_bindir
  local folder = Process.run( "pwd" ).output_string.before_first('\n')
  local script = "#!/bin/sh\n"
  script += ''java --class-path "$/Build/Java" boss.vm.BossVM'' (folder)
  File.save( "launcher.script", script )
  execute "$cp launcher.script $/boss" (Build.SUDO_CMD,Build.BINDIR)
  execute "$chmod a+x $/boss" (Build.SUDO_CMD,Build.BINDIR)
  File.delete( "launcher.script" )
endRoutine

routine rogo_build_rogue
  File.create_folder( "Build/Rogue" )
  if (Files("Source/Rogue","**.rogue").any_newer_than(Build.BOSS_EXE))
    execute( "roguec Source/Rogue/Console/Main.rogue --debug --libraries=Source/Rogue --output=$ --compile" (Build.BOSS_EXE) )
  endIf
  build_rogue_launcher
endRoutine

routine build_rogue_launcher
  if (System.os == "Windows") return
  local launcher_filepath = "$/boss" (Build.BINDIR)
  if (File.exists(launcher_filepath)) return
  println "-------------------------------------------------------------------------------"
  println "Creating $/boss launcher linked to $" (Build.BINDIR,Build.BOSS_EXE)
  println "-------------------------------------------------------------------------------"
  create_bindir
  local folder = Process.run( "pwd" ).output_string.before_first('\n')
  local script = "#!/bin/sh\n"
  script += ''exec "$/$" "$@"\n'' (folder,Build.BOSS_EXE,'$')
  File.save( "launcher.script", script )
  execute "$cp launcher.script $/boss" (Build.SUDO_CMD,Build.BINDIR)
  execute "$chmod a+x $/boss" (Build.SUDO_CMD,Build.BINDIR)
  File.delete( "launcher.script" )
endRoutine

routine rogo_unlink
  if (System.os == "Windows") return
  local launcher_filepath = "$/boss" (Build.BINDIR)
  if (not File.exists(launcher_filepath)) return
  println "-------------------------------------------------------------------------------"
  println "Deleting $/boss launcher" (Build.BINDIR)
  println "-------------------------------------------------------------------------------"
  File.delete( launcher_filepath )
endRoutine

routine create_bindir
  if (not File.exists(Build.BINDIR))
    println "$ does not exist. Creating..." (Build.BINDIR)
    if (not execute( "mkdir$ $" (select{System.os=="Windows":"" || " -p"},Build.BINDIR), &suppress_error ))
      if (Build.SUDO_CMD != "")
        println "Error creating folder, trying again with 'sudo'"
        execute( "$mkdir$ $" (Build.SUDO_CMD,select{System.os=="Windows":"" || " -p"},Build.BINDIR) )
      else
        throw Error( "Build error." )
      endIf
    endIf
    println "Created."
  endIf
endRoutine

routine rogo_run
  execute( "boss" )
endRoutine

routine execute( commands:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    print( "> " ).println( cmd )
    if (System.run(cmd) != 0)
      if (suppress_error) return false
      else                throw Error( "Build failed." )
    endIf
  endForEach
  return true
endRoutine

#------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#------------------------------------------------------------------------------
routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description=null:String, syntax=null:String )
  if (description) Global.description( command, description )
  if (syntax)      Global.syntax( command, syntax )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = StringTable<<String>>()
    rogo_descriptions   = StringTable<<String>>()
    rogo_prefix         = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_DEFS_FILE     = "Local.mk"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_local_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      require m

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( NullValue )
          others:       args.add( arg )
        endWhich
      endForEach
      if (m.parameter_count == 1 and args.count > 1) args = @[ args ] # Wrap args in a ValueList.
      m.call( Global, args )

    method find_command( name:String )->MethodInfo
      return <<Global>>.find_method( rogo_prefix + name )

    method on_error
      Console.error.println rogo_error
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      println "=" * 79
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * 79
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = _join( parts )
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_local_defs
      read_local_defs( LOCAL_DEFS_FILE )

    method read_local_defs( defs_filepath:String )
      # Attempt to read defs from Local.mk
      local overrides = String[]
      if (File.exists(defs_filepath))
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local value = line.after_first('=').trimmed
            if (value.begins_with('"') or value.begins_with('\''))
              value = value.leftmost(-1).rightmost(-1)
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              <<Build>>.set_property( this, p, Value(value) )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Value )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(76)))
        print( "  " ).println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      println "=" * 79
      println "ERROR: No such command '$'." (command)
      println "=" * 79
      println
    endIf
  endIf

  println "USAGE"
  local lines = String[]
  forEach (m in <<Global>>.methods)
    if (m.name.begins_with(Build.rogo_prefix))
      lines.add( "  " + get_syntax(m.name.after_first(Build.rogo_prefix)) )
    endIf
  endForEach
  lines.sort( (a,b)=>(a<b) )
  println (forEach in lines)
  println
endRoutine


routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Global>>.find_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine

